<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>

<script src="CS101:%20Python%20Reference_files/ga.js" async="" type="text/javascript"></script><script type="text/x-mathjax-config;executed=true">
MathJax.Hub.Config({
 "HTML-CSS": { preferredFont: "TeX", availableFonts: ["STIX","TeX"] },
 tex2jax: { inlineMath: [ ["$%","$%"] ],
            displayMath: [ ["$$","$$"] ],
            processEscapes: true,
            ignoreClass: "tex2jax_ignore|dno"
 },
 TeX: { noUndefined: { attributes: { mathcolor: "red", mathbackground: "#FFEEEE", mathsize: "90%" } } },
 messageStyle: "none"
});
</script>
<script type="text/javascript" src="CS101:%20Python%20Reference_files/MathJax.js"></script>

<script type="text/javascript">
<!-- //

// Version 1.9 stripped by Creativyst SS & JavaScript Compressor v2.2c (http://www.creativyst.com/Prod/3/)
function tabberObj(argsObj)
{ var arg; this.div = null; this.classMain = "tabber"; this.classMainLive = "tabberlive"; this.classTab = "tabbertab"; this.classTabDefault = "tabbertabdefault"; this.classNav = "tabbernav"; this.classTabHide = "tabbertabhide"; this.classNavActive = "tabberactive"; this.titleElements = ['h2','h3','h4','h5','h6']; this.titleElementsStripHTML = true; this.removeTitle = true; this.addLinkId = false; this.linkIdFormat = '<tabberid>nav<tabnumberone>'; for (arg in argsObj) { this[arg] = argsObj[arg];}
this.REclassMain = new RegExp('\\b' + this.classMain + '\\b', 'gi'); this.REclassMainLive = new RegExp('\\b' + this.classMainLive + '\\b', 'gi'); this.REclassTab = new RegExp('\\b' + this.classTab + '\\b', 'gi'); this.REclassTabDefault = new RegExp('\\b' + this.classTabDefault + '\\b', 'gi'); this.REclassTabHide = new RegExp('\\b' + this.classTabHide + '\\b', 'gi'); this.tabs = new Array(); if (this.div) { this.init(this.div); this.div = null;}
}
tabberObj.prototype.init = function(e)
{ var
childNodes, i, i2, t, defaultTab=0, DOM_ul, DOM_li, DOM_a, aId, headingElement; if (!document.getElementsByTagName) { return false;}
if (e.id) { this.id = e.id;}
this.tabs.length = 0; childNodes = e.childNodes; for(i=0; i < childNodes.length; i++) { if(childNodes[i].className &&
childNodes[i].className.match(this.REclassTab)) { t = new Object(); t.div = childNodes[i]; this.tabs[this.tabs.length] = t; if (childNodes[i].className.match(this.REclassTabDefault)) { defaultTab = this.tabs.length-1;}
}
}
DOM_ul = document.createElement("ul"); DOM_ul.className = this.classNav; for (i=0; i < this.tabs.length; i++) { t = this.tabs[i]; t.headingText = t.div.title; if (this.removeTitle) { t.div.title = '';}
if (!t.headingText) { for (i2=0; i2<this.titleElements.length; i2++) { headingElement = t.div.getElementsByTagName(this.titleElements[i2])[0]; if (headingElement) { t.headingText = headingElement.innerHTML; if (this.titleElementsStripHTML) { t.headingText.replace(/<br>/gi," "); t.headingText = t.headingText.replace(/<[^>]+>/g,"");}
break;}
}
}
if (!t.headingText) { t.headingText = i + 1;}
DOM_li = document.createElement("li"); t.li = DOM_li; DOM_a = document.createElement("a"); DOM_a.appendChild(document.createTextNode(t.headingText)); DOM_a.href = "javascript:void(null);"; DOM_a.title = t.headingText; DOM_a.onclick = this.navClick; DOM_a.tabber = this; DOM_a.tabberIndex = i; if (this.addLinkId && this.linkIdFormat) { aId = this.linkIdFormat; aId = aId.replace(/<tabberid>/gi, this.id); aId = aId.replace(/<tabnumberzero>/gi, i); aId = aId.replace(/<tabnumberone>/gi, i+1); aId = aId.replace(/<tabtitle>/gi, t.headingText.replace(/[^a-zA-Z0-9\-]/gi, '')); DOM_a.id = aId;}
DOM_li.appendChild(DOM_a); DOM_ul.appendChild(DOM_li);}
e.insertBefore(DOM_ul, e.firstChild); e.className = e.className.replace(this.REclassMain, this.classMainLive); this.tabShow(defaultTab); if (typeof this.onLoad == 'function') { this.onLoad({tabber:this});}
return this;}; tabberObj.prototype.navClick = function(event)
{ var
rVal, a, self, tabberIndex, onClickArgs; a = this; if (!a.tabber) { return false;}
self = a.tabber; tabberIndex = a.tabberIndex; a.blur(); if (typeof self.onClick == 'function') { onClickArgs = {'tabber':self, 'index':tabberIndex, 'event':event}; if (!event) { onClickArgs.event = window.event;}
rVal = self.onClick(onClickArgs); if (rVal === false) { return false;}
}
self.tabShow(tabberIndex); return false;}; tabberObj.prototype.tabHideAll = function()
{ var i; for (i = 0; i < this.tabs.length; i++) { this.tabHide(i);}
}; tabberObj.prototype.tabHide = function(tabberIndex)
{ var div; if (!this.tabs[tabberIndex]) { return false;}
div = this.tabs[tabberIndex].div; if (!div.className.match(this.REclassTabHide)) { div.className += ' ' + this.classTabHide;}
this.navClearActive(tabberIndex); return this;}; tabberObj.prototype.tabShow = function(tabberIndex)
{ var div; if (!this.tabs[tabberIndex]) { return false;}
this.tabHideAll(); div = this.tabs[tabberIndex].div; div.className = div.className.replace(this.REclassTabHide, ''); this.navSetActive(tabberIndex); if (typeof this.onTabDisplay == 'function') { this.onTabDisplay({'tabber':this, 'index':tabberIndex});}
return this;}; tabberObj.prototype.navSetActive = function(tabberIndex)
{ this.tabs[tabberIndex].li.className = this.classNavActive; return this;}; tabberObj.prototype.navClearActive = function(tabberIndex)
{ this.tabs[tabberIndex].li.className = ''; return this;}; function tabberAutomatic(tabberArgs)
{ var
tempObj, divs, i; if (!tabberArgs) { tabberArgs = {};}
tempObj = new tabberObj(tabberArgs); divs = document.getElementsByTagName("div"); for (i=0; i < divs.length; i++) { if (divs[i].className &&
divs[i].className.match(tempObj.REclassMain)) { tabberArgs.div = divs[i]; divs[i].tabber = new tabberObj(tabberArgs);}
}
return this;}
function tabberAutomaticOnLoad(tabberArgs)
{ var oldOnLoad; if (!tabberArgs) { tabberArgs = {};}
oldOnLoad = window.onload; if (typeof window.onload != 'function') { window.onload = function() { tabberAutomatic(tabberArgs);};} else { window.onload = function() { oldOnLoad(); tabberAutomatic(tabberArgs);};}
}
if (typeof tabberOptions == 'undefined') { tabberAutomaticOnLoad();} else { if (!tabberOptions['manualStartup']) { tabberAutomaticOnLoad(tabberOptions);}
}

//-->
</script>


<style type="text/css">
/*--------------------------------------------------
  REQUIRED to hide the non-active tab content.
  But do not hide them in the print stylesheet!
  --------------------------------------------------*/
.tabberlive .tabbertabhide {
 display:none;
}

/*--------------------------------------------------
  .tabber = before the tabber interface is set up
  .tabberlive = after the tabber interface is set up
  --------------------------------------------------*/
.tabber {
}
.tabberlive {
 margin-top:1em;
}

/*--------------------------------------------------
  ul.tabbernav = the tab navigation list
  li.tabberactive = the active tab
  --------------------------------------------------*/
ul.tabbernav
{
 margin:0;
 padding: 3px 0;
 border-bottom: 1px solid #778;
 font: bold 12px Verdana, sans-serif;
}

ul.tabbernav li
{
 list-style: none;
 margin: 0;
 display: inline;
}

ul.tabbernav li a
{
 padding: 3px 0.5em;
 margin-left: 3px;
 border: 1px solid #778;
 border-bottom: none;
 background: #DDE;
 text-decoration: none;
}

ul.tabbernav li a:link { color: #448; }
ul.tabbernav li a:visited { color: #667; }

ul.tabbernav li a:hover
{
 color: #000;
 background: #AAE;
 border-color: #227;
}

ul.tabbernav li.tabberactive a
{
 background-color: #fff;
 border-bottom: 1px solid #fff;
}

ul.tabbernav li.tabberactive a:hover
{
 color: #000;
 background: white;
 border-bottom: 1px solid white;
}

/*--------------------------------------------------
  .tabbertab = the tab content
  Add style only after the tabber interface is set up (.tabberlive)
  --------------------------------------------------*/
.tabberlive .tabbertab {
 padding:5px;
 border:1px solid #aaa;
 border-top:0;

 /* If you don't want the tab size changing whenever a tab is changed
    you can set a fixed height */

 /* height:200px; */

 /* If you set a fix height set overflow to auto and you will get a
    scrollbar when necessary */

 /* overflow:auto; */
}

/* If desired, hide the heading since a heading is provided by the tab */
.tabberlive .tabbertab h2 {
 display:none;
}
.tabberlive .tabbertab h3 {
 display:none;
}

/* Example of using an ID to set different styles for the tabs on the page */
.tabberlive#tab1 {
}
.tabberlive#tab2 {
}
.tabberlive#tab2 .tabbertab {
 height:200px;
 overflow:auto;
}
</style>


<script type="text/javascript">
<!-- //

// Version 1.9 stripped by Creativyst SS & JavaScript Compressor v2.2c (http://www.creativyst.com/Prod/3/)
function tabberObj(argsObj)
{ var arg; this.div = null; this.classMain = "tabber"; this.classMainLive = "tabberlive"; this.classTab = "tabbertab"; this.classTabDefault = "tabbertabdefault"; this.classNav = "tabbernav"; this.classTabHide = "tabbertabhide"; this.classNavActive = "tabberactive"; this.titleElements = ['h2','h3','h4','h5','h6']; this.titleElementsStripHTML = true; this.removeTitle = true; this.addLinkId = false; this.linkIdFormat = '<tabberid>nav<tabnumberone>'; for (arg in argsObj) { this[arg] = argsObj[arg];}
this.REclassMain = new RegExp('\\b' + this.classMain + '\\b', 'gi'); this.REclassMainLive = new RegExp('\\b' + this.classMainLive + '\\b', 'gi'); this.REclassTab = new RegExp('\\b' + this.classTab + '\\b', 'gi'); this.REclassTabDefault = new RegExp('\\b' + this.classTabDefault + '\\b', 'gi'); this.REclassTabHide = new RegExp('\\b' + this.classTabHide + '\\b', 'gi'); this.tabs = new Array(); if (this.div) { this.init(this.div); this.div = null;}
}
tabberObj.prototype.init = function(e)
{ var
childNodes, i, i2, t, defaultTab=0, DOM_ul, DOM_li, DOM_a, aId, headingElement; if (!document.getElementsByTagName) { return false;}
if (e.id) { this.id = e.id;}
this.tabs.length = 0; childNodes = e.childNodes; for(i=0; i < childNodes.length; i++) { if(childNodes[i].className &&
childNodes[i].className.match(this.REclassTab)) { t = new Object(); t.div = childNodes[i]; this.tabs[this.tabs.length] = t; if (childNodes[i].className.match(this.REclassTabDefault)) { defaultTab = this.tabs.length-1;}
}
}
DOM_ul = document.createElement("ul"); DOM_ul.className = this.classNav; for (i=0; i < this.tabs.length; i++) { t = this.tabs[i]; t.headingText = t.div.title; if (this.removeTitle) { t.div.title = '';}
if (!t.headingText) { for (i2=0; i2<this.titleElements.length; i2++) { headingElement = t.div.getElementsByTagName(this.titleElements[i2])[0]; if (headingElement) { t.headingText = headingElement.innerHTML; if (this.titleElementsStripHTML) { t.headingText.replace(/<br>/gi," "); t.headingText = t.headingText.replace(/<[^>]+>/g,"");}
break;}
}
}
if (!t.headingText) { t.headingText = i + 1;}
DOM_li = document.createElement("li"); t.li = DOM_li; DOM_a = document.createElement("a"); DOM_a.appendChild(document.createTextNode(t.headingText)); DOM_a.href = "javascript:void(null);"; DOM_a.title = t.headingText; DOM_a.onclick = this.navClick; DOM_a.tabber = this; DOM_a.tabberIndex = i; if (this.addLinkId && this.linkIdFormat) { aId = this.linkIdFormat; aId = aId.replace(/<tabberid>/gi, this.id); aId = aId.replace(/<tabnumberzero>/gi, i); aId = aId.replace(/<tabnumberone>/gi, i+1); aId = aId.replace(/<tabtitle>/gi, t.headingText.replace(/[^a-zA-Z0-9\-]/gi, '')); DOM_a.id = aId;}
DOM_li.appendChild(DOM_a); DOM_ul.appendChild(DOM_li);}
e.insertBefore(DOM_ul, e.firstChild); e.className = e.className.replace(this.REclassMain, this.classMainLive); this.tabShow(defaultTab); if (typeof this.onLoad == 'function') { this.onLoad({tabber:this});}
return this;}; tabberObj.prototype.navClick = function(event)
{ var
rVal, a, self, tabberIndex, onClickArgs; a = this; if (!a.tabber) { return false;}
self = a.tabber; tabberIndex = a.tabberIndex; a.blur(); if (typeof self.onClick == 'function') { onClickArgs = {'tabber':self, 'index':tabberIndex, 'event':event}; if (!event) { onClickArgs.event = window.event;}
rVal = self.onClick(onClickArgs); if (rVal === false) { return false;}
}
self.tabShow(tabberIndex); return false;}; tabberObj.prototype.tabHideAll = function()
{ var i; for (i = 0; i < this.tabs.length; i++) { this.tabHide(i);}
}; tabberObj.prototype.tabHide = function(tabberIndex)
{ var div; if (!this.tabs[tabberIndex]) { return false;}
div = this.tabs[tabberIndex].div; if (!div.className.match(this.REclassTabHide)) { div.className += ' ' + this.classTabHide;}
this.navClearActive(tabberIndex); return this;}; tabberObj.prototype.tabShow = function(tabberIndex)
{ var div; if (!this.tabs[tabberIndex]) { return false;}
this.tabHideAll(); div = this.tabs[tabberIndex].div; div.className = div.className.replace(this.REclassTabHide, ''); this.navSetActive(tabberIndex); if (typeof this.onTabDisplay == 'function') { this.onTabDisplay({'tabber':this, 'index':tabberIndex});}
return this;}; tabberObj.prototype.navSetActive = function(tabberIndex)
{ this.tabs[tabberIndex].li.className = this.classNavActive; return this;}; tabberObj.prototype.navClearActive = function(tabberIndex)
{ this.tabs[tabberIndex].li.className = ''; return this;}; function tabberAutomatic(tabberArgs)
{ var
tempObj, divs, i; if (!tabberArgs) { tabberArgs = {};}
tempObj = new tabberObj(tabberArgs); divs = document.getElementsByTagName("div"); for (i=0; i < divs.length; i++) { if (divs[i].className &&
divs[i].className.match(tempObj.REclassMain)) { tabberArgs.div = divs[i]; divs[i].tabber = new tabberObj(tabberArgs);}
}
return this;}
function tabberAutomaticOnLoad(tabberArgs)
{ var oldOnLoad; if (!tabberArgs) { tabberArgs = {};}
oldOnLoad = window.onload; if (typeof window.onload != 'function') { window.onload = function() { tabberAutomatic(tabberArgs);};} else { window.onload = function() { oldOnLoad(); tabberAutomatic(tabberArgs);};}
}
if (typeof tabberOptions == 'undefined') { tabberAutomaticOnLoad();} else { if (!tabberOptions['manualStartup']) { tabberAutomaticOnLoad(tabberOptions);}
}

//-->
</script>


<style type="text/css">
/*--------------------------------------------------
  REQUIRED to hide the non-active tab content.
  But do not hide them in the print stylesheet!
  --------------------------------------------------*/
.tabberlive .tabbertabhide {
 display:none;
}

/*--------------------------------------------------
  .tabber = before the tabber interface is set up
  .tabberlive = after the tabber interface is set up
  --------------------------------------------------*/
.tabber {
}
.tabberlive {
 margin-top:1em;
}

/*--------------------------------------------------
  ul.tabbernav = the tab navigation list
  li.tabberactive = the active tab
  --------------------------------------------------*/
ul.tabbernav
{
 margin:0;
 padding: 3px 0;
 border-bottom: 1px solid #778;
 font: bold 12px Verdana, sans-serif;
}

ul.tabbernav li
{
 list-style: none;
 margin: 0;
 display: inline;
}

ul.tabbernav li a
{
 padding: 3px 0.5em;
 margin-left: 3px;
 border: 1px solid #778;
 border-bottom: none;
 background: #DDE;
 text-decoration: none;
}

ul.tabbernav li a:link { color: #448; }
ul.tabbernav li a:visited { color: #667; }

ul.tabbernav li a:hover
{
 color: #000;
 background: #AAE;
 border-color: #227;
}

ul.tabbernav li.tabberactive a
{
 background-color: #fff;
 border-bottom: 1px solid #fff;
}

ul.tabbernav li.tabberactive a:hover
{
 color: #000;
 background: white;
 border-bottom: 1px solid white;
}

/*--------------------------------------------------
  .tabbertab = the tab content
  Add style only after the tabber interface is set up (.tabberlive)
  --------------------------------------------------*/
.tabberlive .tabbertab {
 padding:5px;
 border:1px solid #aaa;
 border-top:0;

 /* If you don't want the tab size changing whenever a tab is changed
    you can set a fixed height */

 /* height:200px; */

 /* If you set a fix height set overflow to auto and you will get a
    scrollbar when necessary */

 /* overflow:auto; */
}

/* If desired, hide the heading since a heading is provided by the tab */
.tabberlive .tabbertab h2 {
 display:none;
}
.tabberlive .tabbertab h3 {
 display:none;
}

/* Example of using an ID to set different styles for the tabs on the page */
.tabberlive#tab1 {
}
.tabberlive#tab2 {
}
.tabberlive#tab2 .tabbertab {
 height:200px;
 overflow:auto;
}
</style>


<script type="text/javascript">
<!-- //

// Version 1.9 stripped by Creativyst SS & JavaScript Compressor v2.2c (http://www.creativyst.com/Prod/3/)
function tabberObj(argsObj)
{ var arg; this.div = null; this.classMain = "tabber"; this.classMainLive = "tabberlive"; this.classTab = "tabbertab"; this.classTabDefault = "tabbertabdefault"; this.classNav = "tabbernav"; this.classTabHide = "tabbertabhide"; this.classNavActive = "tabberactive"; this.titleElements = ['h2','h3','h4','h5','h6']; this.titleElementsStripHTML = true; this.removeTitle = true; this.addLinkId = false; this.linkIdFormat = '<tabberid>nav<tabnumberone>'; for (arg in argsObj) { this[arg] = argsObj[arg];}
this.REclassMain = new RegExp('\\b' + this.classMain + '\\b', 'gi'); this.REclassMainLive = new RegExp('\\b' + this.classMainLive + '\\b', 'gi'); this.REclassTab = new RegExp('\\b' + this.classTab + '\\b', 'gi'); this.REclassTabDefault = new RegExp('\\b' + this.classTabDefault + '\\b', 'gi'); this.REclassTabHide = new RegExp('\\b' + this.classTabHide + '\\b', 'gi'); this.tabs = new Array(); if (this.div) { this.init(this.div); this.div = null;}
}
tabberObj.prototype.init = function(e)
{ var
childNodes, i, i2, t, defaultTab=0, DOM_ul, DOM_li, DOM_a, aId, headingElement; if (!document.getElementsByTagName) { return false;}
if (e.id) { this.id = e.id;}
this.tabs.length = 0; childNodes = e.childNodes; for(i=0; i < childNodes.length; i++) { if(childNodes[i].className &&
childNodes[i].className.match(this.REclassTab)) { t = new Object(); t.div = childNodes[i]; this.tabs[this.tabs.length] = t; if (childNodes[i].className.match(this.REclassTabDefault)) { defaultTab = this.tabs.length-1;}
}
}
DOM_ul = document.createElement("ul"); DOM_ul.className = this.classNav; for (i=0; i < this.tabs.length; i++) { t = this.tabs[i]; t.headingText = t.div.title; if (this.removeTitle) { t.div.title = '';}
if (!t.headingText) { for (i2=0; i2<this.titleElements.length; i2++) { headingElement = t.div.getElementsByTagName(this.titleElements[i2])[0]; if (headingElement) { t.headingText = headingElement.innerHTML; if (this.titleElementsStripHTML) { t.headingText.replace(/<br>/gi," "); t.headingText = t.headingText.replace(/<[^>]+>/g,"");}
break;}
}
}
if (!t.headingText) { t.headingText = i + 1;}
DOM_li = document.createElement("li"); t.li = DOM_li; DOM_a = document.createElement("a"); DOM_a.appendChild(document.createTextNode(t.headingText)); DOM_a.href = "javascript:void(null);"; DOM_a.title = t.headingText; DOM_a.onclick = this.navClick; DOM_a.tabber = this; DOM_a.tabberIndex = i; if (this.addLinkId && this.linkIdFormat) { aId = this.linkIdFormat; aId = aId.replace(/<tabberid>/gi, this.id); aId = aId.replace(/<tabnumberzero>/gi, i); aId = aId.replace(/<tabnumberone>/gi, i+1); aId = aId.replace(/<tabtitle>/gi, t.headingText.replace(/[^a-zA-Z0-9\-]/gi, '')); DOM_a.id = aId;}
DOM_li.appendChild(DOM_a); DOM_ul.appendChild(DOM_li);}
e.insertBefore(DOM_ul, e.firstChild); e.className = e.className.replace(this.REclassMain, this.classMainLive); this.tabShow(defaultTab); if (typeof this.onLoad == 'function') { this.onLoad({tabber:this});}
return this;}; tabberObj.prototype.navClick = function(event)
{ var
rVal, a, self, tabberIndex, onClickArgs; a = this; if (!a.tabber) { return false;}
self = a.tabber; tabberIndex = a.tabberIndex; a.blur(); if (typeof self.onClick == 'function') { onClickArgs = {'tabber':self, 'index':tabberIndex, 'event':event}; if (!event) { onClickArgs.event = window.event;}
rVal = self.onClick(onClickArgs); if (rVal === false) { return false;}
}
self.tabShow(tabberIndex); return false;}; tabberObj.prototype.tabHideAll = function()
{ var i; for (i = 0; i < this.tabs.length; i++) { this.tabHide(i);}
}; tabberObj.prototype.tabHide = function(tabberIndex)
{ var div; if (!this.tabs[tabberIndex]) { return false;}
div = this.tabs[tabberIndex].div; if (!div.className.match(this.REclassTabHide)) { div.className += ' ' + this.classTabHide;}
this.navClearActive(tabberIndex); return this;}; tabberObj.prototype.tabShow = function(tabberIndex)
{ var div; if (!this.tabs[tabberIndex]) { return false;}
this.tabHideAll(); div = this.tabs[tabberIndex].div; div.className = div.className.replace(this.REclassTabHide, ''); this.navSetActive(tabberIndex); if (typeof this.onTabDisplay == 'function') { this.onTabDisplay({'tabber':this, 'index':tabberIndex});}
return this;}; tabberObj.prototype.navSetActive = function(tabberIndex)
{ this.tabs[tabberIndex].li.className = this.classNavActive; return this;}; tabberObj.prototype.navClearActive = function(tabberIndex)
{ this.tabs[tabberIndex].li.className = ''; return this;}; function tabberAutomatic(tabberArgs)
{ var
tempObj, divs, i; if (!tabberArgs) { tabberArgs = {};}
tempObj = new tabberObj(tabberArgs); divs = document.getElementsByTagName("div"); for (i=0; i < divs.length; i++) { if (divs[i].className &&
divs[i].className.match(tempObj.REclassMain)) { tabberArgs.div = divs[i]; divs[i].tabber = new tabberObj(tabberArgs);}
}
return this;}
function tabberAutomaticOnLoad(tabberArgs)
{ var oldOnLoad; if (!tabberArgs) { tabberArgs = {};}
oldOnLoad = window.onload; if (typeof window.onload != 'function') { window.onload = function() { tabberAutomatic(tabberArgs);};} else { window.onload = function() { oldOnLoad(); tabberAutomatic(tabberArgs);};}
}
if (typeof tabberOptions == 'undefined') { tabberAutomaticOnLoad();} else { if (!tabberOptions['manualStartup']) { tabberAutomaticOnLoad(tabberOptions);}
}

//-->
</script>


<style type="text/css">
/*--------------------------------------------------
  REQUIRED to hide the non-active tab content.
  But do not hide them in the print stylesheet!
  --------------------------------------------------*/
.tabberlive .tabbertabhide {
 display:none;
}

/*--------------------------------------------------
  .tabber = before the tabber interface is set up
  .tabberlive = after the tabber interface is set up
  --------------------------------------------------*/
.tabber {
}
.tabberlive {
 margin-top:1em;
}

/*--------------------------------------------------
  ul.tabbernav = the tab navigation list
  li.tabberactive = the active tab
  --------------------------------------------------*/
ul.tabbernav
{
 margin:0;
 padding: 3px 0;
 border-bottom: 1px solid #778;
 font: bold 12px Verdana, sans-serif;
}

ul.tabbernav li
{
 list-style: none;
 margin: 0;
 display: inline;
}

ul.tabbernav li a
{
 padding: 3px 0.5em;
 margin-left: 3px;
 border: 1px solid #778;
 border-bottom: none;
 background: #DDE;
 text-decoration: none;
}

ul.tabbernav li a:link { color: #448; }
ul.tabbernav li a:visited { color: #667; }

ul.tabbernav li a:hover
{
 color: #000;
 background: #AAE;
 border-color: #227;
}

ul.tabbernav li.tabberactive a
{
 background-color: #fff;
 border-bottom: 1px solid #fff;
}

ul.tabbernav li.tabberactive a:hover
{
 color: #000;
 background: white;
 border-bottom: 1px solid white;
}

/*--------------------------------------------------
  .tabbertab = the tab content
  Add style only after the tabber interface is set up (.tabberlive)
  --------------------------------------------------*/
.tabberlive .tabbertab {
 padding:5px;
 border:1px solid #aaa;
 border-top:0;

 /* If you don't want the tab size changing whenever a tab is changed
    you can set a fixed height */

 /* height:200px; */

 /* If you set a fix height set overflow to auto and you will get a
    scrollbar when necessary */

 /* overflow:auto; */
}

/* If desired, hide the heading since a heading is provided by the tab */
.tabberlive .tabbertab h2 {
 display:none;
}
.tabberlive .tabbertab h3 {
 display:none;
}

/* Example of using an ID to set different styles for the tabs on the page */
.tabberlive#tab1 {
}
.tabberlive#tab2 {
}
.tabberlive#tab2 .tabbertab {
 height:200px;
 overflow:auto;
}
</style>


<script type="text/javascript">
<!-- //

// Version 1.9 stripped by Creativyst SS & JavaScript Compressor v2.2c (http://www.creativyst.com/Prod/3/)
function tabberObj(argsObj)
{ var arg; this.div = null; this.classMain = "tabber"; this.classMainLive = "tabberlive"; this.classTab = "tabbertab"; this.classTabDefault = "tabbertabdefault"; this.classNav = "tabbernav"; this.classTabHide = "tabbertabhide"; this.classNavActive = "tabberactive"; this.titleElements = ['h2','h3','h4','h5','h6']; this.titleElementsStripHTML = true; this.removeTitle = true; this.addLinkId = false; this.linkIdFormat = '<tabberid>nav<tabnumberone>'; for (arg in argsObj) { this[arg] = argsObj[arg];}
this.REclassMain = new RegExp('\\b' + this.classMain + '\\b', 'gi'); this.REclassMainLive = new RegExp('\\b' + this.classMainLive + '\\b', 'gi'); this.REclassTab = new RegExp('\\b' + this.classTab + '\\b', 'gi'); this.REclassTabDefault = new RegExp('\\b' + this.classTabDefault + '\\b', 'gi'); this.REclassTabHide = new RegExp('\\b' + this.classTabHide + '\\b', 'gi'); this.tabs = new Array(); if (this.div) { this.init(this.div); this.div = null;}
}
tabberObj.prototype.init = function(e)
{ var
childNodes, i, i2, t, defaultTab=0, DOM_ul, DOM_li, DOM_a, aId, headingElement; if (!document.getElementsByTagName) { return false;}
if (e.id) { this.id = e.id;}
this.tabs.length = 0; childNodes = e.childNodes; for(i=0; i < childNodes.length; i++) { if(childNodes[i].className &&
childNodes[i].className.match(this.REclassTab)) { t = new Object(); t.div = childNodes[i]; this.tabs[this.tabs.length] = t; if (childNodes[i].className.match(this.REclassTabDefault)) { defaultTab = this.tabs.length-1;}
}
}
DOM_ul = document.createElement("ul"); DOM_ul.className = this.classNav; for (i=0; i < this.tabs.length; i++) { t = this.tabs[i]; t.headingText = t.div.title; if (this.removeTitle) { t.div.title = '';}
if (!t.headingText) { for (i2=0; i2<this.titleElements.length; i2++) { headingElement = t.div.getElementsByTagName(this.titleElements[i2])[0]; if (headingElement) { t.headingText = headingElement.innerHTML; if (this.titleElementsStripHTML) { t.headingText.replace(/<br>/gi," "); t.headingText = t.headingText.replace(/<[^>]+>/g,"");}
break;}
}
}
if (!t.headingText) { t.headingText = i + 1;}
DOM_li = document.createElement("li"); t.li = DOM_li; DOM_a = document.createElement("a"); DOM_a.appendChild(document.createTextNode(t.headingText)); DOM_a.href = "javascript:void(null);"; DOM_a.title = t.headingText; DOM_a.onclick = this.navClick; DOM_a.tabber = this; DOM_a.tabberIndex = i; if (this.addLinkId && this.linkIdFormat) { aId = this.linkIdFormat; aId = aId.replace(/<tabberid>/gi, this.id); aId = aId.replace(/<tabnumberzero>/gi, i); aId = aId.replace(/<tabnumberone>/gi, i+1); aId = aId.replace(/<tabtitle>/gi, t.headingText.replace(/[^a-zA-Z0-9\-]/gi, '')); DOM_a.id = aId;}
DOM_li.appendChild(DOM_a); DOM_ul.appendChild(DOM_li);}
e.insertBefore(DOM_ul, e.firstChild); e.className = e.className.replace(this.REclassMain, this.classMainLive); this.tabShow(defaultTab); if (typeof this.onLoad == 'function') { this.onLoad({tabber:this});}
return this;}; tabberObj.prototype.navClick = function(event)
{ var
rVal, a, self, tabberIndex, onClickArgs; a = this; if (!a.tabber) { return false;}
self = a.tabber; tabberIndex = a.tabberIndex; a.blur(); if (typeof self.onClick == 'function') { onClickArgs = {'tabber':self, 'index':tabberIndex, 'event':event}; if (!event) { onClickArgs.event = window.event;}
rVal = self.onClick(onClickArgs); if (rVal === false) { return false;}
}
self.tabShow(tabberIndex); return false;}; tabberObj.prototype.tabHideAll = function()
{ var i; for (i = 0; i < this.tabs.length; i++) { this.tabHide(i);}
}; tabberObj.prototype.tabHide = function(tabberIndex)
{ var div; if (!this.tabs[tabberIndex]) { return false;}
div = this.tabs[tabberIndex].div; if (!div.className.match(this.REclassTabHide)) { div.className += ' ' + this.classTabHide;}
this.navClearActive(tabberIndex); return this;}; tabberObj.prototype.tabShow = function(tabberIndex)
{ var div; if (!this.tabs[tabberIndex]) { return false;}
this.tabHideAll(); div = this.tabs[tabberIndex].div; div.className = div.className.replace(this.REclassTabHide, ''); this.navSetActive(tabberIndex); if (typeof this.onTabDisplay == 'function') { this.onTabDisplay({'tabber':this, 'index':tabberIndex});}
return this;}; tabberObj.prototype.navSetActive = function(tabberIndex)
{ this.tabs[tabberIndex].li.className = this.classNavActive; return this;}; tabberObj.prototype.navClearActive = function(tabberIndex)
{ this.tabs[tabberIndex].li.className = ''; return this;}; function tabberAutomatic(tabberArgs)
{ var
tempObj, divs, i; if (!tabberArgs) { tabberArgs = {};}
tempObj = new tabberObj(tabberArgs); divs = document.getElementsByTagName("div"); for (i=0; i < divs.length; i++) { if (divs[i].className &&
divs[i].className.match(tempObj.REclassMain)) { tabberArgs.div = divs[i]; divs[i].tabber = new tabberObj(tabberArgs);}
}
return this;}
function tabberAutomaticOnLoad(tabberArgs)
{ var oldOnLoad; if (!tabberArgs) { tabberArgs = {};}
oldOnLoad = window.onload; if (typeof window.onload != 'function') { window.onload = function() { tabberAutomatic(tabberArgs);};} else { window.onload = function() { oldOnLoad(); tabberAutomatic(tabberArgs);};}
}
if (typeof tabberOptions == 'undefined') { tabberAutomaticOnLoad();} else { if (!tabberOptions['manualStartup']) { tabberAutomaticOnLoad(tabberOptions);}
}

//-->
</script>


<style type="text/css">
/*--------------------------------------------------
  REQUIRED to hide the non-active tab content.
  But do not hide them in the print stylesheet!
  --------------------------------------------------*/
.tabberlive .tabbertabhide {
 display:none;
}

/*--------------------------------------------------
  .tabber = before the tabber interface is set up
  .tabberlive = after the tabber interface is set up
  --------------------------------------------------*/
.tabber {
}
.tabberlive {
 margin-top:1em;
}

/*--------------------------------------------------
  ul.tabbernav = the tab navigation list
  li.tabberactive = the active tab
  --------------------------------------------------*/
ul.tabbernav
{
 margin:0;
 padding: 3px 0;
 border-bottom: 1px solid #778;
 font: bold 12px Verdana, sans-serif;
}

ul.tabbernav li
{
 list-style: none;
 margin: 0;
 display: inline;
}

ul.tabbernav li a
{
 padding: 3px 0.5em;
 margin-left: 3px;
 border: 1px solid #778;
 border-bottom: none;
 background: #DDE;
 text-decoration: none;
}

ul.tabbernav li a:link { color: #448; }
ul.tabbernav li a:visited { color: #667; }

ul.tabbernav li a:hover
{
 color: #000;
 background: #AAE;
 border-color: #227;
}

ul.tabbernav li.tabberactive a
{
 background-color: #fff;
 border-bottom: 1px solid #fff;
}

ul.tabbernav li.tabberactive a:hover
{
 color: #000;
 background: white;
 border-bottom: 1px solid white;
}

/*--------------------------------------------------
  .tabbertab = the tab content
  Add style only after the tabber interface is set up (.tabberlive)
  --------------------------------------------------*/
.tabberlive .tabbertab {
 padding:5px;
 border:1px solid #aaa;
 border-top:0;

 /* If you don't want the tab size changing whenever a tab is changed
    you can set a fixed height */

 /* height:200px; */

 /* If you set a fix height set overflow to auto and you will get a
    scrollbar when necessary */

 /* overflow:auto; */
}

/* If desired, hide the heading since a heading is provided by the tab */
.tabberlive .tabbertab h2 {
 display:none;
}
.tabberlive .tabbertab h3 {
 display:none;
}

/* Example of using an ID to set different styles for the tabs on the page */
.tabberlive#tab1 {
}
.tabberlive#tab2 {
}
.tabberlive#tab2 .tabbertab {
 height:200px;
 overflow:auto;
}
</style>


<script type="text/javascript">
<!-- //

// Version 1.9 stripped by Creativyst SS & JavaScript Compressor v2.2c (http://www.creativyst.com/Prod/3/)
function tabberObj(argsObj)
{ var arg; this.div = null; this.classMain = "tabber"; this.classMainLive = "tabberlive"; this.classTab = "tabbertab"; this.classTabDefault = "tabbertabdefault"; this.classNav = "tabbernav"; this.classTabHide = "tabbertabhide"; this.classNavActive = "tabberactive"; this.titleElements = ['h2','h3','h4','h5','h6']; this.titleElementsStripHTML = true; this.removeTitle = true; this.addLinkId = false; this.linkIdFormat = '<tabberid>nav<tabnumberone>'; for (arg in argsObj) { this[arg] = argsObj[arg];}
this.REclassMain = new RegExp('\\b' + this.classMain + '\\b', 'gi'); this.REclassMainLive = new RegExp('\\b' + this.classMainLive + '\\b', 'gi'); this.REclassTab = new RegExp('\\b' + this.classTab + '\\b', 'gi'); this.REclassTabDefault = new RegExp('\\b' + this.classTabDefault + '\\b', 'gi'); this.REclassTabHide = new RegExp('\\b' + this.classTabHide + '\\b', 'gi'); this.tabs = new Array(); if (this.div) { this.init(this.div); this.div = null;}
}
tabberObj.prototype.init = function(e)
{ var
childNodes, i, i2, t, defaultTab=0, DOM_ul, DOM_li, DOM_a, aId, headingElement; if (!document.getElementsByTagName) { return false;}
if (e.id) { this.id = e.id;}
this.tabs.length = 0; childNodes = e.childNodes; for(i=0; i < childNodes.length; i++) { if(childNodes[i].className &&
childNodes[i].className.match(this.REclassTab)) { t = new Object(); t.div = childNodes[i]; this.tabs[this.tabs.length] = t; if (childNodes[i].className.match(this.REclassTabDefault)) { defaultTab = this.tabs.length-1;}
}
}
DOM_ul = document.createElement("ul"); DOM_ul.className = this.classNav; for (i=0; i < this.tabs.length; i++) { t = this.tabs[i]; t.headingText = t.div.title; if (this.removeTitle) { t.div.title = '';}
if (!t.headingText) { for (i2=0; i2<this.titleElements.length; i2++) { headingElement = t.div.getElementsByTagName(this.titleElements[i2])[0]; if (headingElement) { t.headingText = headingElement.innerHTML; if (this.titleElementsStripHTML) { t.headingText.replace(/<br>/gi," "); t.headingText = t.headingText.replace(/<[^>]+>/g,"");}
break;}
}
}
if (!t.headingText) { t.headingText = i + 1;}
DOM_li = document.createElement("li"); t.li = DOM_li; DOM_a = document.createElement("a"); DOM_a.appendChild(document.createTextNode(t.headingText)); DOM_a.href = "javascript:void(null);"; DOM_a.title = t.headingText; DOM_a.onclick = this.navClick; DOM_a.tabber = this; DOM_a.tabberIndex = i; if (this.addLinkId && this.linkIdFormat) { aId = this.linkIdFormat; aId = aId.replace(/<tabberid>/gi, this.id); aId = aId.replace(/<tabnumberzero>/gi, i); aId = aId.replace(/<tabnumberone>/gi, i+1); aId = aId.replace(/<tabtitle>/gi, t.headingText.replace(/[^a-zA-Z0-9\-]/gi, '')); DOM_a.id = aId;}
DOM_li.appendChild(DOM_a); DOM_ul.appendChild(DOM_li);}
e.insertBefore(DOM_ul, e.firstChild); e.className = e.className.replace(this.REclassMain, this.classMainLive); this.tabShow(defaultTab); if (typeof this.onLoad == 'function') { this.onLoad({tabber:this});}
return this;}; tabberObj.prototype.navClick = function(event)
{ var
rVal, a, self, tabberIndex, onClickArgs; a = this; if (!a.tabber) { return false;}
self = a.tabber; tabberIndex = a.tabberIndex; a.blur(); if (typeof self.onClick == 'function') { onClickArgs = {'tabber':self, 'index':tabberIndex, 'event':event}; if (!event) { onClickArgs.event = window.event;}
rVal = self.onClick(onClickArgs); if (rVal === false) { return false;}
}
self.tabShow(tabberIndex); return false;}; tabberObj.prototype.tabHideAll = function()
{ var i; for (i = 0; i < this.tabs.length; i++) { this.tabHide(i);}
}; tabberObj.prototype.tabHide = function(tabberIndex)
{ var div; if (!this.tabs[tabberIndex]) { return false;}
div = this.tabs[tabberIndex].div; if (!div.className.match(this.REclassTabHide)) { div.className += ' ' + this.classTabHide;}
this.navClearActive(tabberIndex); return this;}; tabberObj.prototype.tabShow = function(tabberIndex)
{ var div; if (!this.tabs[tabberIndex]) { return false;}
this.tabHideAll(); div = this.tabs[tabberIndex].div; div.className = div.className.replace(this.REclassTabHide, ''); this.navSetActive(tabberIndex); if (typeof this.onTabDisplay == 'function') { this.onTabDisplay({'tabber':this, 'index':tabberIndex});}
return this;}; tabberObj.prototype.navSetActive = function(tabberIndex)
{ this.tabs[tabberIndex].li.className = this.classNavActive; return this;}; tabberObj.prototype.navClearActive = function(tabberIndex)
{ this.tabs[tabberIndex].li.className = ''; return this;}; function tabberAutomatic(tabberArgs)
{ var
tempObj, divs, i; if (!tabberArgs) { tabberArgs = {};}
tempObj = new tabberObj(tabberArgs); divs = document.getElementsByTagName("div"); for (i=0; i < divs.length; i++) { if (divs[i].className &&
divs[i].className.match(tempObj.REclassMain)) { tabberArgs.div = divs[i]; divs[i].tabber = new tabberObj(tabberArgs);}
}
return this;}
function tabberAutomaticOnLoad(tabberArgs)
{ var oldOnLoad; if (!tabberArgs) { tabberArgs = {};}
oldOnLoad = window.onload; if (typeof window.onload != 'function') { window.onload = function() { tabberAutomatic(tabberArgs);};} else { window.onload = function() { oldOnLoad(); tabberAutomatic(tabberArgs);};}
}
if (typeof tabberOptions == 'undefined') { tabberAutomaticOnLoad();} else { if (!tabberOptions['manualStartup']) { tabberAutomaticOnLoad(tabberOptions);}
}

//-->
</script>


<style type="text/css">
/*--------------------------------------------------
  REQUIRED to hide the non-active tab content.
  But do not hide them in the print stylesheet!
  --------------------------------------------------*/
.tabberlive .tabbertabhide {
 display:none;
}

/*--------------------------------------------------
  .tabber = before the tabber interface is set up
  .tabberlive = after the tabber interface is set up
  --------------------------------------------------*/
.tabber {
}
.tabberlive {
 margin-top:1em;
}

/*--------------------------------------------------
  ul.tabbernav = the tab navigation list
  li.tabberactive = the active tab
  --------------------------------------------------*/
ul.tabbernav
{
 margin:0;
 padding: 3px 0;
 border-bottom: 1px solid #778;
 font: bold 12px Verdana, sans-serif;
}

ul.tabbernav li
{
 list-style: none;
 margin: 0;
 display: inline;
}

ul.tabbernav li a
{
 padding: 3px 0.5em;
 margin-left: 3px;
 border: 1px solid #778;
 border-bottom: none;
 background: #DDE;
 text-decoration: none;
}

ul.tabbernav li a:link { color: #448; }
ul.tabbernav li a:visited { color: #667; }

ul.tabbernav li a:hover
{
 color: #000;
 background: #AAE;
 border-color: #227;
}

ul.tabbernav li.tabberactive a
{
 background-color: #fff;
 border-bottom: 1px solid #fff;
}

ul.tabbernav li.tabberactive a:hover
{
 color: #000;
 background: white;
 border-bottom: 1px solid white;
}

/*--------------------------------------------------
  .tabbertab = the tab content
  Add style only after the tabber interface is set up (.tabberlive)
  --------------------------------------------------*/
.tabberlive .tabbertab {
 padding:5px;
 border:1px solid #aaa;
 border-top:0;

 /* If you don't want the tab size changing whenever a tab is changed
    you can set a fixed height */

 /* height:200px; */

 /* If you set a fix height set overflow to auto and you will get a
    scrollbar when necessary */

 /* overflow:auto; */
}

/* If desired, hide the heading since a heading is provided by the tab */
.tabberlive .tabbertab h2 {
 display:none;
}
.tabberlive .tabbertab h3 {
 display:none;
}

/* Example of using an ID to set different styles for the tabs on the page */
.tabberlive#tab1 {
}
.tabberlive#tab2 {
}
.tabberlive#tab2 .tabbertab {
 height:200px;
 overflow:auto;
}
</style>


<script type="text/javascript">
<!-- //

// Version 1.9 stripped by Creativyst SS & JavaScript Compressor v2.2c (http://www.creativyst.com/Prod/3/)
function tabberObj(argsObj)
{ var arg; this.div = null; this.classMain = "tabber"; this.classMainLive = "tabberlive"; this.classTab = "tabbertab"; this.classTabDefault = "tabbertabdefault"; this.classNav = "tabbernav"; this.classTabHide = "tabbertabhide"; this.classNavActive = "tabberactive"; this.titleElements = ['h2','h3','h4','h5','h6']; this.titleElementsStripHTML = true; this.removeTitle = true; this.addLinkId = false; this.linkIdFormat = '<tabberid>nav<tabnumberone>'; for (arg in argsObj) { this[arg] = argsObj[arg];}
this.REclassMain = new RegExp('\\b' + this.classMain + '\\b', 'gi'); this.REclassMainLive = new RegExp('\\b' + this.classMainLive + '\\b', 'gi'); this.REclassTab = new RegExp('\\b' + this.classTab + '\\b', 'gi'); this.REclassTabDefault = new RegExp('\\b' + this.classTabDefault + '\\b', 'gi'); this.REclassTabHide = new RegExp('\\b' + this.classTabHide + '\\b', 'gi'); this.tabs = new Array(); if (this.div) { this.init(this.div); this.div = null;}
}
tabberObj.prototype.init = function(e)
{ var
childNodes, i, i2, t, defaultTab=0, DOM_ul, DOM_li, DOM_a, aId, headingElement; if (!document.getElementsByTagName) { return false;}
if (e.id) { this.id = e.id;}
this.tabs.length = 0; childNodes = e.childNodes; for(i=0; i < childNodes.length; i++) { if(childNodes[i].className &&
childNodes[i].className.match(this.REclassTab)) { t = new Object(); t.div = childNodes[i]; this.tabs[this.tabs.length] = t; if (childNodes[i].className.match(this.REclassTabDefault)) { defaultTab = this.tabs.length-1;}
}
}
DOM_ul = document.createElement("ul"); DOM_ul.className = this.classNav; for (i=0; i < this.tabs.length; i++) { t = this.tabs[i]; t.headingText = t.div.title; if (this.removeTitle) { t.div.title = '';}
if (!t.headingText) { for (i2=0; i2<this.titleElements.length; i2++) { headingElement = t.div.getElementsByTagName(this.titleElements[i2])[0]; if (headingElement) { t.headingText = headingElement.innerHTML; if (this.titleElementsStripHTML) { t.headingText.replace(/<br>/gi," "); t.headingText = t.headingText.replace(/<[^>]+>/g,"");}
break;}
}
}
if (!t.headingText) { t.headingText = i + 1;}
DOM_li = document.createElement("li"); t.li = DOM_li; DOM_a = document.createElement("a"); DOM_a.appendChild(document.createTextNode(t.headingText)); DOM_a.href = "javascript:void(null);"; DOM_a.title = t.headingText; DOM_a.onclick = this.navClick; DOM_a.tabber = this; DOM_a.tabberIndex = i; if (this.addLinkId && this.linkIdFormat) { aId = this.linkIdFormat; aId = aId.replace(/<tabberid>/gi, this.id); aId = aId.replace(/<tabnumberzero>/gi, i); aId = aId.replace(/<tabnumberone>/gi, i+1); aId = aId.replace(/<tabtitle>/gi, t.headingText.replace(/[^a-zA-Z0-9\-]/gi, '')); DOM_a.id = aId;}
DOM_li.appendChild(DOM_a); DOM_ul.appendChild(DOM_li);}
e.insertBefore(DOM_ul, e.firstChild); e.className = e.className.replace(this.REclassMain, this.classMainLive); this.tabShow(defaultTab); if (typeof this.onLoad == 'function') { this.onLoad({tabber:this});}
return this;}; tabberObj.prototype.navClick = function(event)
{ var
rVal, a, self, tabberIndex, onClickArgs; a = this; if (!a.tabber) { return false;}
self = a.tabber; tabberIndex = a.tabberIndex; a.blur(); if (typeof self.onClick == 'function') { onClickArgs = {'tabber':self, 'index':tabberIndex, 'event':event}; if (!event) { onClickArgs.event = window.event;}
rVal = self.onClick(onClickArgs); if (rVal === false) { return false;}
}
self.tabShow(tabberIndex); return false;}; tabberObj.prototype.tabHideAll = function()
{ var i; for (i = 0; i < this.tabs.length; i++) { this.tabHide(i);}
}; tabberObj.prototype.tabHide = function(tabberIndex)
{ var div; if (!this.tabs[tabberIndex]) { return false;}
div = this.tabs[tabberIndex].div; if (!div.className.match(this.REclassTabHide)) { div.className += ' ' + this.classTabHide;}
this.navClearActive(tabberIndex); return this;}; tabberObj.prototype.tabShow = function(tabberIndex)
{ var div; if (!this.tabs[tabberIndex]) { return false;}
this.tabHideAll(); div = this.tabs[tabberIndex].div; div.className = div.className.replace(this.REclassTabHide, ''); this.navSetActive(tabberIndex); if (typeof this.onTabDisplay == 'function') { this.onTabDisplay({'tabber':this, 'index':tabberIndex});}
return this;}; tabberObj.prototype.navSetActive = function(tabberIndex)
{ this.tabs[tabberIndex].li.className = this.classNavActive; return this;}; tabberObj.prototype.navClearActive = function(tabberIndex)
{ this.tabs[tabberIndex].li.className = ''; return this;}; function tabberAutomatic(tabberArgs)
{ var
tempObj, divs, i; if (!tabberArgs) { tabberArgs = {};}
tempObj = new tabberObj(tabberArgs); divs = document.getElementsByTagName("div"); for (i=0; i < divs.length; i++) { if (divs[i].className &&
divs[i].className.match(tempObj.REclassMain)) { tabberArgs.div = divs[i]; divs[i].tabber = new tabberObj(tabberArgs);}
}
return this;}
function tabberAutomaticOnLoad(tabberArgs)
{ var oldOnLoad; if (!tabberArgs) { tabberArgs = {};}
oldOnLoad = window.onload; if (typeof window.onload != 'function') { window.onload = function() { tabberAutomatic(tabberArgs);};} else { window.onload = function() { oldOnLoad(); tabberAutomatic(tabberArgs);};}
}
if (typeof tabberOptions == 'undefined') { tabberAutomaticOnLoad();} else { if (!tabberOptions['manualStartup']) { tabberAutomaticOnLoad(tabberOptions);}
}

//-->
</script>


<style type="text/css">
/*--------------------------------------------------
  REQUIRED to hide the non-active tab content.
  But do not hide them in the print stylesheet!
  --------------------------------------------------*/
.tabberlive .tabbertabhide {
 display:none;
}

/*--------------------------------------------------
  .tabber = before the tabber interface is set up
  .tabberlive = after the tabber interface is set up
  --------------------------------------------------*/
.tabber {
}
.tabberlive {
 margin-top:1em;
}

/*--------------------------------------------------
  ul.tabbernav = the tab navigation list
  li.tabberactive = the active tab
  --------------------------------------------------*/
ul.tabbernav
{
 margin:0;
 padding: 3px 0;
 border-bottom: 1px solid #778;
 font: bold 12px Verdana, sans-serif;
}

ul.tabbernav li
{
 list-style: none;
 margin: 0;
 display: inline;
}

ul.tabbernav li a
{
 padding: 3px 0.5em;
 margin-left: 3px;
 border: 1px solid #778;
 border-bottom: none;
 background: #DDE;
 text-decoration: none;
}

ul.tabbernav li a:link { color: #448; }
ul.tabbernav li a:visited { color: #667; }

ul.tabbernav li a:hover
{
 color: #000;
 background: #AAE;
 border-color: #227;
}

ul.tabbernav li.tabberactive a
{
 background-color: #fff;
 border-bottom: 1px solid #fff;
}

ul.tabbernav li.tabberactive a:hover
{
 color: #000;
 background: white;
 border-bottom: 1px solid white;
}

/*--------------------------------------------------
  .tabbertab = the tab content
  Add style only after the tabber interface is set up (.tabberlive)
  --------------------------------------------------*/
.tabberlive .tabbertab {
 padding:5px;
 border:1px solid #aaa;
 border-top:0;

 /* If you don't want the tab size changing whenever a tab is changed
    you can set a fixed height */

 /* height:200px; */

 /* If you set a fix height set overflow to auto and you will get a
    scrollbar when necessary */

 /* overflow:auto; */
}

/* If desired, hide the heading since a heading is provided by the tab */
.tabberlive .tabbertab h2 {
 display:none;
}
.tabberlive .tabbertab h3 {
 display:none;
}

/* Example of using an ID to set different styles for the tabs on the page */
.tabberlive#tab1 {
}
.tabberlive#tab2 {
}
.tabberlive#tab2 .tabbertab {
 height:200px;
 overflow:auto;
}
</style>


<script type="text/javascript">
<!-- //

// Version 1.9 stripped by Creativyst SS & JavaScript Compressor v2.2c (http://www.creativyst.com/Prod/3/)
function tabberObj(argsObj)
{ var arg; this.div = null; this.classMain = "tabber"; this.classMainLive = "tabberlive"; this.classTab = "tabbertab"; this.classTabDefault = "tabbertabdefault"; this.classNav = "tabbernav"; this.classTabHide = "tabbertabhide"; this.classNavActive = "tabberactive"; this.titleElements = ['h2','h3','h4','h5','h6']; this.titleElementsStripHTML = true; this.removeTitle = true; this.addLinkId = false; this.linkIdFormat = '<tabberid>nav<tabnumberone>'; for (arg in argsObj) { this[arg] = argsObj[arg];}
this.REclassMain = new RegExp('\\b' + this.classMain + '\\b', 'gi'); this.REclassMainLive = new RegExp('\\b' + this.classMainLive + '\\b', 'gi'); this.REclassTab = new RegExp('\\b' + this.classTab + '\\b', 'gi'); this.REclassTabDefault = new RegExp('\\b' + this.classTabDefault + '\\b', 'gi'); this.REclassTabHide = new RegExp('\\b' + this.classTabHide + '\\b', 'gi'); this.tabs = new Array(); if (this.div) { this.init(this.div); this.div = null;}
}
tabberObj.prototype.init = function(e)
{ var
childNodes, i, i2, t, defaultTab=0, DOM_ul, DOM_li, DOM_a, aId, headingElement; if (!document.getElementsByTagName) { return false;}
if (e.id) { this.id = e.id;}
this.tabs.length = 0; childNodes = e.childNodes; for(i=0; i < childNodes.length; i++) { if(childNodes[i].className &&
childNodes[i].className.match(this.REclassTab)) { t = new Object(); t.div = childNodes[i]; this.tabs[this.tabs.length] = t; if (childNodes[i].className.match(this.REclassTabDefault)) { defaultTab = this.tabs.length-1;}
}
}
DOM_ul = document.createElement("ul"); DOM_ul.className = this.classNav; for (i=0; i < this.tabs.length; i++) { t = this.tabs[i]; t.headingText = t.div.title; if (this.removeTitle) { t.div.title = '';}
if (!t.headingText) { for (i2=0; i2<this.titleElements.length; i2++) { headingElement = t.div.getElementsByTagName(this.titleElements[i2])[0]; if (headingElement) { t.headingText = headingElement.innerHTML; if (this.titleElementsStripHTML) { t.headingText.replace(/<br>/gi," "); t.headingText = t.headingText.replace(/<[^>]+>/g,"");}
break;}
}
}
if (!t.headingText) { t.headingText = i + 1;}
DOM_li = document.createElement("li"); t.li = DOM_li; DOM_a = document.createElement("a"); DOM_a.appendChild(document.createTextNode(t.headingText)); DOM_a.href = "javascript:void(null);"; DOM_a.title = t.headingText; DOM_a.onclick = this.navClick; DOM_a.tabber = this; DOM_a.tabberIndex = i; if (this.addLinkId && this.linkIdFormat) { aId = this.linkIdFormat; aId = aId.replace(/<tabberid>/gi, this.id); aId = aId.replace(/<tabnumberzero>/gi, i); aId = aId.replace(/<tabnumberone>/gi, i+1); aId = aId.replace(/<tabtitle>/gi, t.headingText.replace(/[^a-zA-Z0-9\-]/gi, '')); DOM_a.id = aId;}
DOM_li.appendChild(DOM_a); DOM_ul.appendChild(DOM_li);}
e.insertBefore(DOM_ul, e.firstChild); e.className = e.className.replace(this.REclassMain, this.classMainLive); this.tabShow(defaultTab); if (typeof this.onLoad == 'function') { this.onLoad({tabber:this});}
return this;}; tabberObj.prototype.navClick = function(event)
{ var
rVal, a, self, tabberIndex, onClickArgs; a = this; if (!a.tabber) { return false;}
self = a.tabber; tabberIndex = a.tabberIndex; a.blur(); if (typeof self.onClick == 'function') { onClickArgs = {'tabber':self, 'index':tabberIndex, 'event':event}; if (!event) { onClickArgs.event = window.event;}
rVal = self.onClick(onClickArgs); if (rVal === false) { return false;}
}
self.tabShow(tabberIndex); return false;}; tabberObj.prototype.tabHideAll = function()
{ var i; for (i = 0; i < this.tabs.length; i++) { this.tabHide(i);}
}; tabberObj.prototype.tabHide = function(tabberIndex)
{ var div; if (!this.tabs[tabberIndex]) { return false;}
div = this.tabs[tabberIndex].div; if (!div.className.match(this.REclassTabHide)) { div.className += ' ' + this.classTabHide;}
this.navClearActive(tabberIndex); return this;}; tabberObj.prototype.tabShow = function(tabberIndex)
{ var div; if (!this.tabs[tabberIndex]) { return false;}
this.tabHideAll(); div = this.tabs[tabberIndex].div; div.className = div.className.replace(this.REclassTabHide, ''); this.navSetActive(tabberIndex); if (typeof this.onTabDisplay == 'function') { this.onTabDisplay({'tabber':this, 'index':tabberIndex});}
return this;}; tabberObj.prototype.navSetActive = function(tabberIndex)
{ this.tabs[tabberIndex].li.className = this.classNavActive; return this;}; tabberObj.prototype.navClearActive = function(tabberIndex)
{ this.tabs[tabberIndex].li.className = ''; return this;}; function tabberAutomatic(tabberArgs)
{ var
tempObj, divs, i; if (!tabberArgs) { tabberArgs = {};}
tempObj = new tabberObj(tabberArgs); divs = document.getElementsByTagName("div"); for (i=0; i < divs.length; i++) { if (divs[i].className &&
divs[i].className.match(tempObj.REclassMain)) { tabberArgs.div = divs[i]; divs[i].tabber = new tabberObj(tabberArgs);}
}
return this;}
function tabberAutomaticOnLoad(tabberArgs)
{ var oldOnLoad; if (!tabberArgs) { tabberArgs = {};}
oldOnLoad = window.onload; if (typeof window.onload != 'function') { window.onload = function() { tabberAutomatic(tabberArgs);};} else { window.onload = function() { oldOnLoad(); tabberAutomatic(tabberArgs);};}
}
if (typeof tabberOptions == 'undefined') { tabberAutomaticOnLoad();} else { if (!tabberOptions['manualStartup']) { tabberAutomaticOnLoad(tabberOptions);}
}

//-->
</script>


<style type="text/css">
/*--------------------------------------------------
  REQUIRED to hide the non-active tab content.
  But do not hide them in the print stylesheet!
  --------------------------------------------------*/
.tabberlive .tabbertabhide {
 display:none;
}

/*--------------------------------------------------
  .tabber = before the tabber interface is set up
  .tabberlive = after the tabber interface is set up
  --------------------------------------------------*/
.tabber {
}
.tabberlive {
 margin-top:1em;
}

/*--------------------------------------------------
  ul.tabbernav = the tab navigation list
  li.tabberactive = the active tab
  --------------------------------------------------*/
ul.tabbernav
{
 margin:0;
 padding: 3px 0;
 border-bottom: 1px solid #778;
 font: bold 12px Verdana, sans-serif;
}

ul.tabbernav li
{
 list-style: none;
 margin: 0;
 display: inline;
}

ul.tabbernav li a
{
 padding: 3px 0.5em;
 margin-left: 3px;
 border: 1px solid #778;
 border-bottom: none;
 background: #DDE;
 text-decoration: none;
}

ul.tabbernav li a:link { color: #448; }
ul.tabbernav li a:visited { color: #667; }

ul.tabbernav li a:hover
{
 color: #000;
 background: #AAE;
 border-color: #227;
}

ul.tabbernav li.tabberactive a
{
 background-color: #fff;
 border-bottom: 1px solid #fff;
}

ul.tabbernav li.tabberactive a:hover
{
 color: #000;
 background: white;
 border-bottom: 1px solid white;
}

/*--------------------------------------------------
  .tabbertab = the tab content
  Add style only after the tabber interface is set up (.tabberlive)
  --------------------------------------------------*/
.tabberlive .tabbertab {
 padding:5px;
 border:1px solid #aaa;
 border-top:0;

 /* If you don't want the tab size changing whenever a tab is changed
    you can set a fixed height */

 /* height:200px; */

 /* If you set a fix height set overflow to auto and you will get a
    scrollbar when necessary */

 /* overflow:auto; */
}

/* If desired, hide the heading since a heading is provided by the tab */
.tabberlive .tabbertab h2 {
 display:none;
}
.tabberlive .tabbertab h3 {
 display:none;
}

/* Example of using an ID to set different styles for the tabs on the page */
.tabberlive#tab1 {
}
.tabberlive#tab2 {
}
.tabberlive#tab2 .tabbertab {
 height:200px;
 overflow:auto;
}
</style>


<script type="text/javascript">
<!-- //

// Version 1.9 stripped by Creativyst SS & JavaScript Compressor v2.2c (http://www.creativyst.com/Prod/3/)
function tabberObj(argsObj)
{ var arg; this.div = null; this.classMain = "tabber"; this.classMainLive = "tabberlive"; this.classTab = "tabbertab"; this.classTabDefault = "tabbertabdefault"; this.classNav = "tabbernav"; this.classTabHide = "tabbertabhide"; this.classNavActive = "tabberactive"; this.titleElements = ['h2','h3','h4','h5','h6']; this.titleElementsStripHTML = true; this.removeTitle = true; this.addLinkId = false; this.linkIdFormat = '<tabberid>nav<tabnumberone>'; for (arg in argsObj) { this[arg] = argsObj[arg];}
this.REclassMain = new RegExp('\\b' + this.classMain + '\\b', 'gi'); this.REclassMainLive = new RegExp('\\b' + this.classMainLive + '\\b', 'gi'); this.REclassTab = new RegExp('\\b' + this.classTab + '\\b', 'gi'); this.REclassTabDefault = new RegExp('\\b' + this.classTabDefault + '\\b', 'gi'); this.REclassTabHide = new RegExp('\\b' + this.classTabHide + '\\b', 'gi'); this.tabs = new Array(); if (this.div) { this.init(this.div); this.div = null;}
}
tabberObj.prototype.init = function(e)
{ var
childNodes, i, i2, t, defaultTab=0, DOM_ul, DOM_li, DOM_a, aId, headingElement; if (!document.getElementsByTagName) { return false;}
if (e.id) { this.id = e.id;}
this.tabs.length = 0; childNodes = e.childNodes; for(i=0; i < childNodes.length; i++) { if(childNodes[i].className &&
childNodes[i].className.match(this.REclassTab)) { t = new Object(); t.div = childNodes[i]; this.tabs[this.tabs.length] = t; if (childNodes[i].className.match(this.REclassTabDefault)) { defaultTab = this.tabs.length-1;}
}
}
DOM_ul = document.createElement("ul"); DOM_ul.className = this.classNav; for (i=0; i < this.tabs.length; i++) { t = this.tabs[i]; t.headingText = t.div.title; if (this.removeTitle) { t.div.title = '';}
if (!t.headingText) { for (i2=0; i2<this.titleElements.length; i2++) { headingElement = t.div.getElementsByTagName(this.titleElements[i2])[0]; if (headingElement) { t.headingText = headingElement.innerHTML; if (this.titleElementsStripHTML) { t.headingText.replace(/<br>/gi," "); t.headingText = t.headingText.replace(/<[^>]+>/g,"");}
break;}
}
}
if (!t.headingText) { t.headingText = i + 1;}
DOM_li = document.createElement("li"); t.li = DOM_li; DOM_a = document.createElement("a"); DOM_a.appendChild(document.createTextNode(t.headingText)); DOM_a.href = "javascript:void(null);"; DOM_a.title = t.headingText; DOM_a.onclick = this.navClick; DOM_a.tabber = this; DOM_a.tabberIndex = i; if (this.addLinkId && this.linkIdFormat) { aId = this.linkIdFormat; aId = aId.replace(/<tabberid>/gi, this.id); aId = aId.replace(/<tabnumberzero>/gi, i); aId = aId.replace(/<tabnumberone>/gi, i+1); aId = aId.replace(/<tabtitle>/gi, t.headingText.replace(/[^a-zA-Z0-9\-]/gi, '')); DOM_a.id = aId;}
DOM_li.appendChild(DOM_a); DOM_ul.appendChild(DOM_li);}
e.insertBefore(DOM_ul, e.firstChild); e.className = e.className.replace(this.REclassMain, this.classMainLive); this.tabShow(defaultTab); if (typeof this.onLoad == 'function') { this.onLoad({tabber:this});}
return this;}; tabberObj.prototype.navClick = function(event)
{ var
rVal, a, self, tabberIndex, onClickArgs; a = this; if (!a.tabber) { return false;}
self = a.tabber; tabberIndex = a.tabberIndex; a.blur(); if (typeof self.onClick == 'function') { onClickArgs = {'tabber':self, 'index':tabberIndex, 'event':event}; if (!event) { onClickArgs.event = window.event;}
rVal = self.onClick(onClickArgs); if (rVal === false) { return false;}
}
self.tabShow(tabberIndex); return false;}; tabberObj.prototype.tabHideAll = function()
{ var i; for (i = 0; i < this.tabs.length; i++) { this.tabHide(i);}
}; tabberObj.prototype.tabHide = function(tabberIndex)
{ var div; if (!this.tabs[tabberIndex]) { return false;}
div = this.tabs[tabberIndex].div; if (!div.className.match(this.REclassTabHide)) { div.className += ' ' + this.classTabHide;}
this.navClearActive(tabberIndex); return this;}; tabberObj.prototype.tabShow = function(tabberIndex)
{ var div; if (!this.tabs[tabberIndex]) { return false;}
this.tabHideAll(); div = this.tabs[tabberIndex].div; div.className = div.className.replace(this.REclassTabHide, ''); this.navSetActive(tabberIndex); if (typeof this.onTabDisplay == 'function') { this.onTabDisplay({'tabber':this, 'index':tabberIndex});}
return this;}; tabberObj.prototype.navSetActive = function(tabberIndex)
{ this.tabs[tabberIndex].li.className = this.classNavActive; return this;}; tabberObj.prototype.navClearActive = function(tabberIndex)
{ this.tabs[tabberIndex].li.className = ''; return this;}; function tabberAutomatic(tabberArgs)
{ var
tempObj, divs, i; if (!tabberArgs) { tabberArgs = {};}
tempObj = new tabberObj(tabberArgs); divs = document.getElementsByTagName("div"); for (i=0; i < divs.length; i++) { if (divs[i].className &&
divs[i].className.match(tempObj.REclassMain)) { tabberArgs.div = divs[i]; divs[i].tabber = new tabberObj(tabberArgs);}
}
return this;}
function tabberAutomaticOnLoad(tabberArgs)
{ var oldOnLoad; if (!tabberArgs) { tabberArgs = {};}
oldOnLoad = window.onload; if (typeof window.onload != 'function') { window.onload = function() { tabberAutomatic(tabberArgs);};} else { window.onload = function() { oldOnLoad(); tabberAutomatic(tabberArgs);};}
}
if (typeof tabberOptions == 'undefined') { tabberAutomaticOnLoad();} else { if (!tabberOptions['manualStartup']) { tabberAutomaticOnLoad(tabberOptions);}
}

//-->
</script>


<style type="text/css">
/*--------------------------------------------------
  REQUIRED to hide the non-active tab content.
  But do not hide them in the print stylesheet!
  --------------------------------------------------*/
.tabberlive .tabbertabhide {
 display:none;
}

/*--------------------------------------------------
  .tabber = before the tabber interface is set up
  .tabberlive = after the tabber interface is set up
  --------------------------------------------------*/
.tabber {
}
.tabberlive {
 margin-top:1em;
}

/*--------------------------------------------------
  ul.tabbernav = the tab navigation list
  li.tabberactive = the active tab
  --------------------------------------------------*/
ul.tabbernav
{
 margin:0;
 padding: 3px 0;
 border-bottom: 1px solid #778;
 font: bold 12px Verdana, sans-serif;
}

ul.tabbernav li
{
 list-style: none;
 margin: 0;
 display: inline;
}

ul.tabbernav li a
{
 padding: 3px 0.5em;
 margin-left: 3px;
 border: 1px solid #778;
 border-bottom: none;
 background: #DDE;
 text-decoration: none;
}

ul.tabbernav li a:link { color: #448; }
ul.tabbernav li a:visited { color: #667; }

ul.tabbernav li a:hover
{
 color: #000;
 background: #AAE;
 border-color: #227;
}

ul.tabbernav li.tabberactive a
{
 background-color: #fff;
 border-bottom: 1px solid #fff;
}

ul.tabbernav li.tabberactive a:hover
{
 color: #000;
 background: white;
 border-bottom: 1px solid white;
}

/*--------------------------------------------------
  .tabbertab = the tab content
  Add style only after the tabber interface is set up (.tabberlive)
  --------------------------------------------------*/
.tabberlive .tabbertab {
 padding:5px;
 border:1px solid #aaa;
 border-top:0;

 /* If you don't want the tab size changing whenever a tab is changed
    you can set a fixed height */

 /* height:200px; */

 /* If you set a fix height set overflow to auto and you will get a
    scrollbar when necessary */

 /* overflow:auto; */
}

/* If desired, hide the heading since a heading is provided by the tab */
.tabberlive .tabbertab h2 {
 display:none;
}
.tabberlive .tabbertab h3 {
 display:none;
}

/* Example of using an ID to set different styles for the tabs on the page */
.tabberlive#tab1 {
}
.tabberlive#tab2 {
}
.tabberlive#tab2 .tabbertab {
 height:200px;
 overflow:auto;
}
</style>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="robots" content="index,nofollow">

<title>CS101: Python Reference - Udacity Wiki</title>
<script type="text/javascript" src="CS101:%20Python%20Reference_files/common.js"></script>
<script type="text/javascript"><!--
function add_gui_editor_links() {
    // Add gui editor link after the text editor link

    // If the variable is not set or browser is not compatible, exit
    try {gui_editor_link_href}
    catch (e) {
        //alert("add_gui_editor_links: gui_editor_link_href not here");
        return
    }
    if (can_use_gui_editor() == false){
        //alert("add_gui_editor_links: can't use gui_editor");
        return;
    }
    var all = document.getElementsByName('texteditlink');
    for (i = 0; i < all.length; i++) {
        var textEditorLink = all[i];
        // Create a a link
        var guiEditorLink = document.createElement('a');
        guiEditorLink.href = gui_editor_link_href;
        guiEditorLink.className = "edit";
        var text = document.createTextNode(gui_editor_link_text);
        guiEditorLink.appendChild(text);
        // Insert in the editbar
        var editbar = textEditorLink.parentNode
        editbar.insertBefore(guiEditorLink, textEditorLink);
    }
}
--></script>


<link rel="stylesheet" type="text/css" href="CS101:%20Python%20Reference_files/style.css">



<link rel="Start" href="http://wiki.udacity.com/FrontPage">
<link rel="Alternate" title="Wiki Markup" href="http://wiki.udacity.com/CS101:%20Python%20Reference?action=raw">
<link rel="Alternate" media="print" title="Print View" href="http://wiki.udacity.com/CS101:%20Python%20Reference?action=print">
<link rel="Search" href="http://wiki.udacity.com/FindPage">
<link rel="Index" href="http://wiki.udacity.com/TitleIndex">
<link rel="Glossary" href="http://wiki.udacity.com/WordIndex">
<link rel="Help" href="http://wiki.udacity.com/HelpOnFormatting">
<style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Hover_Arrow {position: absolute; width: 15px; height: 11px; cursor: pointer}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 5px 0px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 5px; -webkit-border-radius: 5px; -moz-border-radius: 5px; -khtml-border-radius: 5px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 1px 2em; background: transparent}
.MathJax_MenuTitle {background-color: #CCCCCC; margin: -5px 0 0 0; text-align: center; font-style: italic; font-size: 80%; color: #444444; padding: 2px 0; overflow: hidden}
.MathJax_MenuArrow {position: absolute; right: .5em; color: #666666}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuRadioCheck {position: absolute; left: .7em}
.MathJax_MenuLabel {padding: 1px 2em 3px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #DDDDDD; margin: 4px 3px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: #606872; color: white}
.MathJax_Menu_Close {position: absolute; width: 31px; height: 31px; top: -15px; left: -15px}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1px; bottom: 2px; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style></head>

<body dir="ltr" lang="en"><div style="display: none;" id="MathJax_Message"></div>
<div class="header"><a class="logo" href="http://wiki.udacity.com/FrontPage"><img src="CS101:%20Python%20Reference_files/udacity-wiki-logo.png" alt="Udacity Wiki Logo"></a>
<form class="search" method="get" action="">
<p>
<input name="action" value="fullsearch" type="hidden">
<input name="context" value="180" type="hidden">
<label for="search">Search:</label>
<input id="search" name="value" type="text">
<input id="titlesearch" name="titlesearch" value="Titles" type="submit">
<input id="fullsearch" name="fullsearch" value="Text" type="submit">
</p>
</form><ul id="username"><li><a href="http://wiki.udacity.com/CS101%3A%20Python%20Reference?action=login&amp;login=1" id="login" rel="nofollow">Login</a></li></ul><ul class="gotobar"><li class="wikilink"><a href="http://wiki.udacity.com/RecentChanges">RecentChanges</a></li> <li class="wikilink"><a href="http://wiki.udacity.com/FindPage">FindPage</a></li> <li class="wikilink"><a href="http://wiki.udacity.com/HelpContents">HelpContents</a></li><li class="clear"></li></ul><div class="editbar"> <a class="password" href="http://wiki.udacity.com/CS101%3A%20Python%20Reference?action=login">Locked</a>  <a class="history" href="http://wiki.udacity.com/CS101%3A%20Python%20Reference?action=info">History</a> <a class="admin" href="http://wiki.udacity.com/CS101%3A%20Python%20Reference?action=PageActions">Actions</a> </div><h1><span id="pagelocation"><a class="backlink" href="http://wiki.udacity.com/CS101%3A%20Python%20Reference?action=fullsearch&amp;value=linkto%3A%22CS101%3A+Python+Reference%22&amp;context=180" rel="nofollow" title="Click to do a full-text search for this title">CS101: Python Reference</a></span></h1></div><div class="wrapper"><div class="content" dir="ltr" lang="en">
<div dir="ltr" id="content" lang="en"><span class="anchor" id="top"></span>
<span class="anchor" id="line-1"></span><span class="anchor" id="line-2"></span><span class="anchor" id="line-3"></span><span class="anchor" id="line-4"></span><span class="anchor" id="line-5"></span><p class="line867"></p><div class="table-of-contents"><p class="table-of-contents-heading">Contents</p><ol><li>
<a href="#Arithmetic_Expressions">Arithmetic Expressions</a></li><li>
<a href="#Variables_and_Assignment">Variables and Assignment</a><ol><li>
<a href="#Names">Names</a></li><li>
<a href="#Assignment_Statement">Assignment Statement</a></li><li>
<a href="#Multiple_Assignment">Multiple Assignment</a></li></ol></li><li>
<a href="#Procedures">Procedures</a></li><li>
<a href="#If_Statements">If Statements</a></li><li>
<a href="#Logical_Operators">Logical Operators</a></li><li>
<a href="#Loops">Loops</a><ol><li>
<a href="#While_Loops">While Loops</a></li><li>
<a href="#Break_Statement">Break Statement</a></li></ol></li><li>
<a href="#For_Loops">For Loops</a></li><li>
<a href="#Strings">Strings</a><ol><li>
<a href="#String_Operations">String Operations</a></li></ol></li><li>
<a href="#Lists">Lists</a><ol><li>
<a href="#Loops_on_Lists">Loops on Lists</a></li></ol></li><li>
<a href="#Dictionaries">Dictionaries</a><ol><li>
<a href="#Loops_on_Dictionaries">Loops on Dictionaries</a></li></ol></li><li>
<a href="#Exceptions">Exceptions</a></li><li>
<a href="#Libraries">Libraries</a></li></ol></div> <span class="anchor" id="line-6"></span><span class="anchor" id="line-7"></span><p class="line867">
</p><h2 id="Arithmetic_Expressions">Arithmetic Expressions</h2>
<span class="anchor" id="line-8"></span><p class="line867"><strong>addition</strong>:         <strong>&lt;<em>Number</em>&gt; + &lt;<em>Number</em>&gt; ⇒ &lt;<em>Number</em>&gt;</strong> <br>
 <span class="anchor" id="line-9"></span><span class="anchor" id="line-10"></span></p><ul><li style="list-style-type:none"><p class="line862">outputs the sum of the two input numbers <br>
 <span class="anchor" id="line-11"></span><span class="anchor" id="line-12"></span></p></li></ul><p class="line867"><strong>multiplication</strong>:           <strong>&lt;<em>Number</em>&gt; * &lt;<em>Number</em>&gt; ⇒ &lt;<em>Number</em>&gt;</strong> <br>
 <span class="anchor" id="line-13"></span><span class="anchor" id="line-14"></span></p><ul><li style="list-style-type:none"><p class="line862">outputs the product of the two input numbers <br>
 <span class="anchor" id="line-15"></span><span class="anchor" id="line-16"></span></p></li></ul><p class="line867"><strong>subtraction</strong>:              <strong>&lt;<em>Number</em>&gt; - &lt;<em>Number</em>&gt; ⇒ &lt;<em>Number</em>&gt;</strong> <br>
 <span class="anchor" id="line-17"></span><span class="anchor" id="line-18"></span></p><ul><li style="list-style-type:none"><p class="line862">outputs the difference between the two input numbers <br>
 <span class="anchor" id="line-19"></span><span class="anchor" id="line-20"></span></p></li></ul><p class="line867"><strong>division</strong>:         <strong>&lt;<em>Number</em>&gt; / &lt;<em>Number</em>&gt; ⇒ &lt;<em>Number</em>&gt;</strong> <br>
 <span class="anchor" id="line-21"></span><span class="anchor" id="line-22"></span></p><ul><li style="list-style-type:none"><p class="line862">outputs the result of dividing the first number by the second <br>
 <strong>Note</strong>: if both numbers are whole numbers, the result is truncated to just the whole number part. <br>
 <span class="anchor" id="line-23"></span><span class="anchor" id="line-24"></span></p></li></ul><p class="line867"><strong>modulo</strong>:           <strong>&lt;<em>Number</em>&gt; % &lt;<em>Number</em>&gt; ⇒ &lt;<em>Number</em>&gt;</strong> <br>
 <span class="anchor" id="line-25"></span><span class="anchor" id="line-26"></span></p><ul><li style="list-style-type:none"><p class="line862">outputs the remainder of dividing the first number by the second <br>
 <span class="anchor" id="line-27"></span><span class="anchor" id="line-28"></span></p></li></ul><p class="line867"><strong>exponentiation</strong>:   <strong>&lt;<em>Base</em>&gt; ** &lt;<em>Power</em>&gt; ⇒ &lt;<em>Number</em>&gt;</strong> <br>
 outputs the result of raising &lt;Base&gt; to the &lt;Power&gt; power 
(multiplying &lt;Base&gt; by itself &lt;Power&gt; number of times).  <br>
<br>
 <span class="anchor" id="line-29"></span><span class="anchor" id="line-30"></span></p><p class="line867"><strong>Comparisons</strong> <br>
 <strong>equality</strong>:         <strong>&lt;<em>Value</em>&gt; == &lt;<em>Value</em>&gt; ⇒ &lt;<em>Boolean</em>&gt;</strong> <br>
 <span class="anchor" id="line-31"></span><span class="anchor" id="line-32"></span></p><ul><li style="list-style-type:none"><p class="line862">outputs <strong>True</strong> if the two input values are equal, <strong>False</strong> otherwise <br>
 <span class="anchor" id="line-33"></span><span class="anchor" id="line-34"></span></p></li></ul><p class="line867"><strong>inequality</strong>:               <strong>&lt;<em>Value</em>&gt; != &lt;Value&gt; ⇒ &lt;Boolean&gt;</strong> <br>
 <span class="anchor" id="line-35"></span><span class="anchor" id="line-36"></span></p><ul><li style="list-style-type:none"><p class="line862">outputs <strong>True</strong> if the two input values are not equal, <strong>False</strong> otherwise <br>
 <span class="anchor" id="line-37"></span><span class="anchor" id="line-38"></span></p></li></ul><p class="line867"><strong>greater than</strong>:             <strong>&lt;<em>Number1</em>&gt; &gt; &lt;<em>Number2</em>&gt; ⇒ &lt;<em>Boolean</em>&gt;</strong> <br>
 <span class="anchor" id="line-39"></span><span class="anchor" id="line-40"></span></p><ul><li style="list-style-type:none"><p class="line862">outputs <strong>True</strong> if <em><strong>Number<sub>1</sub></strong></em> is greater than <em><strong>Number<sub>2</sub></strong></em> <br>
 <span class="anchor" id="line-41"></span><span class="anchor" id="line-42"></span></p></li></ul><p class="line867"><strong>less than</strong>:                <em><strong>&lt;Number<sub>1</sub>&gt; &lt; &lt;Number<sub>2</sub>&gt; ⇒ &lt;Boolean&gt;</strong></em> <br>
 <span class="anchor" id="line-43"></span><span class="anchor" id="line-44"></span></p><ul><li style="list-style-type:none"><p class="line862">outputs <strong>True</strong> if <em><strong>Number<sub>1</sub></strong></em> is less than than <em><strong>Number<sub>2</sub></strong></em> <br>
 <span class="anchor" id="line-45"></span><span class="anchor" id="line-46"></span></p></li></ul><p class="line867"><strong>greater or equal to</strong>:      <strong>&lt;<em>Number<sub>1</sub></em>&gt; &gt;= &lt;<em>Number<sub>2</sub></em>&gt; ⇒ &lt;<em>Boolean</em>&gt;</strong> <br>
 <span class="anchor" id="line-47"></span><span class="anchor" id="line-48"></span></p><ul><li style="list-style-type:none"><p class="line862">outputs <strong>True</strong> if <em><strong>Number<sub>1</sub></strong></em>, is not less than <em><strong>Number<sub>2</sub></strong></em> <br>
 <span class="anchor" id="line-49"></span><span class="anchor" id="line-50"></span></p></li></ul><p class="line867"><strong>less than or equal to</strong>:    <strong>&lt;<em>Number<sub>1</sub></em>&gt; &lt;= &lt;<em>Number<sub>2</sub></em>&gt; ⇒ &lt;<em>Boolean</em>&gt;</strong> <br>
 <span class="anchor" id="line-51"></span><span class="anchor" id="line-52"></span></p><ul><li style="list-style-type:none"><p class="line862">outputs <strong>True</strong> if <em><strong>Number<sub>1</sub></strong></em> is not greater than <em><strong>Number<sub>2</sub></strong></em> <br>
 <span class="anchor" id="line-53"></span><span class="anchor" id="line-54"></span></p></li></ul><p class="line867">
</p><h2 id="Variables_and_Assignment">Variables and Assignment</h2>
<span class="anchor" id="line-55"></span><p class="line867">
</p><h3 id="Names">Names</h3>
<span class="anchor" id="line-56"></span><p class="line862">A <em><strong>&lt;Name&gt;</strong></em>
 in Python can be any sequence of letters, numbers, and underscores (_) 
that does not start with a number.  We usually use all lowercase letters
 for variable names, but capitalization must match exactly.  Here are 
some valid examples of names in Python (but most of these would not be 
good choices to actually use in your programs): <br>
 <span class="anchor" id="line-57"></span><span class="anchor" id="line-58"></span></p><ul><li style="list-style-type:none">my_name <span class="anchor" id="line-59"></span></li><li style="list-style-type:none">one2one <span class="anchor" id="line-60"></span></li><li style="list-style-type:none">Dorina <span class="anchor" id="line-61"></span></li><li style="list-style-type:none">this_is_a_very_long_variable_name <span class="anchor" id="line-62"></span><span class="anchor" id="line-63"></span></li></ul><p class="line867">
</p><h3 id="Assignment_Statement">Assignment Statement</h3>
<span class="anchor" id="line-64"></span><p class="line874">An assignment statement assigns a value to a variable: <span class="anchor" id="line-65"></span><span class="anchor" id="line-66"></span></p><ul><li style="list-style-type:none"><p class="line891"><em><strong>&lt;Name&gt; = &lt;Expression&gt;</strong></em> <span class="anchor" id="line-67"></span><span class="anchor" id="line-68"></span></p></li></ul><p class="line862">After the assignment statement, the variable <em><strong>&lt;Name&gt;</strong></em> refers to the value of the <em><strong>&lt;Expression&gt;</strong></em> on the right side of the assignment.  An <em><strong>&lt;Expression&gt;</strong></em> is any Python construct that has a value. <span class="anchor" id="line-69"></span><span class="anchor" id="line-70"></span></p><p class="line867">
</p><h3 id="Multiple_Assignment">Multiple Assignment</h3>
<span class="anchor" id="line-71"></span><p class="line874">We can put 
more than one name on the left side of an assignment statement, and a 
corresponding number of expressions on the right side: <span class="anchor" id="line-72"></span><span class="anchor" id="line-73"></span></p><ul><li style="list-style-type:none"><p class="line891"><em><strong>&lt;Name<sub>1</sub>&gt;, &lt;Name<sub>2</sub>&gt;, ... = &lt;Expression1&gt;, &lt;Expression2&gt;, ...</strong></em> <span class="anchor" id="line-74"></span><span class="anchor" id="line-75"></span></p></li></ul><p class="line874">All
 of the expressions on the right side are evaluated first.  Then, each 
name on the left side is assigned to reference the value of the 
corresponding expression on the right side. This is handy for swapping 
variable values.  For example, <span class="anchor" id="line-76"></span><span class="anchor" id="line-77"></span></p><ul><li style="list-style-type:none"><p class="line891"><strong>s, t = t, s</strong> <span class="anchor" id="line-78"></span><span class="anchor" id="line-79"></span></p></li></ul><p class="line862">would swap the values of s and t so after the assignment statement s now refers to the previous value of <strong>t</strong>, and <strong>t</strong> refers to the previous value of <strong>s</strong>. <br>
 <span class="anchor" id="line-80"></span><span class="anchor" id="line-81"></span></p><p class="line867"><strong>Note</strong>:
 what is really going on here is a bit different.  The multiple values 
are packed in a tuple (which is similar to the list data type introduced
 in Unit 3, but an immutable version of a list), and then unpacked into 
its components when there are multiple names on the left side.  This 
distinction is not important for what we do in cs101, but does become 
important in some contexts. <br>
 <span class="anchor" id="line-82"></span><span class="anchor" id="line-83"></span></p><p class="line867">
</p><h2 id="Procedures">Procedures</h2>
<span class="anchor" id="line-84"></span><p class="line862">A <strong>procedure</strong>
 takes inputs and produces outputs.  It is an abstraction that provides a
 way to use the same code to operate on different data by passing in 
that data as its inputs. <br>
 <span class="anchor" id="line-85"></span><span class="anchor" id="line-86"></span></p><p class="line874">Defining a procedure: <span class="anchor" id="line-87"></span><span class="anchor" id="line-88"></span></p><p class="line867"><span class="anchor" id="line-89"></span><span class="anchor" id="line-90"></span><span class="anchor" id="line-91"></span><span class="anchor" id="line-1-1"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
function isnumbered(obj) {
  return obj.childNodes.length && obj.firstChild.childNodes.length && obj.firstChild.firstChild.className == 'LineNumber';
}
function nformat(num,chrs,add) {
  var nlen = Math.max(0,chrs-(''+num).length), res = '';
  while (nlen>0) { res += ' '; nlen-- }
  return res+num+add;
}
function addnumber(did, nstart, nstep) {
  var c = document.getElementById(did), l = c.firstChild, n = 1;
  if (!isnumbered(c)) {
    if (typeof nstart == 'undefined') nstart = 1;
    if (typeof nstep  == 'undefined') nstep = 1;
    var n = nstart;
    while (l != null) {
      if (l.tagName == 'SPAN') {
        var s = document.createElement('SPAN');
        var a = document.createElement('A');
        s.className = 'LineNumber';
        a.appendChild(document.createTextNode(nformat(n,4,'')));
        a.href = '#' + did + '_' + n;
        s.appendChild(a);
        s.appendChild(document.createTextNode(' '));
        n += nstep;
        if (l.childNodes.length) {
          l.insertBefore(s, l.firstChild);
        }
        else {
          l.appendChild(s);
        }
      }
      l = l.nextSibling;
    }
  }
  return false;
}
function remnumber(did) {
  var c = document.getElementById(did), l = c.firstChild;
  if (isnumbered(c)) {
    while (l != null) {
      if (l.tagName == 'SPAN' && l.firstChild.className == 'LineNumber') l.removeChild(l.firstChild);
      l = l.nextSibling;
    }
  }
  return false;
}
function togglenumber(did, nstart, nstep) {
  var c = document.getElementById(did);
  if (isnumbered(c)) {
    remnumber(did);
  } else {
    addnumber(did,nstart,nstep);
  }
  return false;
}
</script>

<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-98524369ff0f4e6d5ad248fe73190d65876686ad\', 1, 1);" \
                class="codenumbers">Toggle line numbers<\/a>');
</script><a href="#" onclick="return togglenumber('CA-98524369ff0f4e6d5ad248fe73190d65876686ad', 1, 1);" class="codenumbers">Toggle line numbers</a>
<pre dir="ltr" id="CA-98524369ff0f4e6d5ad248fe73190d65876686ad" lang="en"><span class="line"><span class="LineNumber"><a href="#CA-98524369ff0f4e6d5ad248fe73190d65876686ad_1">   1</a> </span><span class="LineAnchor" id="CA-98524369ff0f4e6d5ad248fe73190d65876686ad_1"></span><span class="anchor" id="line-1-2"></span><span class="ResWord">def</span> &lt;<span class="ID">Name</span>&gt;(&lt;<span class="ID">Parameters</span>&gt;):</span>
<span class="line"><span class="LineNumber"><a href="#CA-98524369ff0f4e6d5ad248fe73190d65876686ad_2">   2</a> </span><span class="LineAnchor" id="CA-98524369ff0f4e6d5ad248fe73190d65876686ad_2"></span><span class="anchor" id="line-2-1"></span>      &lt;<span class="ID">Block</span>&gt;</span>
</pre></div></div><span class="anchor" id="line-92"></span><p class="line862">The <strong>&lt;<em>Parameters</em>&gt;</strong> are the inputs to the procedure.  There is one <strong>&lt;<em>Name</em>&gt;</strong> for each input in order, separated by commas.  There can be any number of parameters (including none). <br>
 <span class="anchor" id="line-93"></span><span class="anchor" id="line-94"></span></p><p class="line874">To produce outputs: <span class="anchor" id="line-95"></span><span class="anchor" id="line-96"></span></p><p class="line867"><span class="anchor" id="line-97"></span><span class="anchor" id="line-98"></span><span class="anchor" id="line-1-3"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-67d506f03bde094d449a141984681facfadf9f43\', 1, 1);" \
                class="codenumbers">Toggle line numbers<\/a>');
</script><a href="#" onclick="return togglenumber('CA-67d506f03bde094d449a141984681facfadf9f43', 1, 1);" class="codenumbers">Toggle line numbers</a>
<pre dir="ltr" id="CA-67d506f03bde094d449a141984681facfadf9f43" lang="en"><span class="line"><span class="LineNumber"><a href="#CA-67d506f03bde094d449a141984681facfadf9f43_1">   1</a> </span><span class="LineAnchor" id="CA-67d506f03bde094d449a141984681facfadf9f43_1"></span><span class="anchor" id="line-1-4"></span><span class="ResWord">return</span> &lt;<span class="ID">Expression</span>&gt;, &lt;<span class="ID">Expression</span>&gt;, …</span>
</pre></div></div><span class="anchor" id="line-99"></span><p class="line862">There
 can be any number of expressions following the return (including none, 
in which case the output of the procedure is the special value <strong>None</strong>). <br>
 <span class="anchor" id="line-100"></span><span class="anchor" id="line-101"></span></p><p class="line874">Using a procedure: <span class="anchor" id="line-102"></span><span class="anchor" id="line-103"></span></p><p class="line867"><span class="anchor" id="line-104"></span><span class="anchor" id="line-105"></span><span class="anchor" id="line-1-5"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-24734f5c514ed1c694b95aa22818b0c024bc4b82\', 1, 1);" \
                class="codenumbers">Toggle line numbers<\/a>');
</script><a href="#" onclick="return togglenumber('CA-24734f5c514ed1c694b95aa22818b0c024bc4b82', 1, 1);" class="codenumbers">Toggle line numbers</a>
<pre dir="ltr" id="CA-24734f5c514ed1c694b95aa22818b0c024bc4b82" lang="en"><span class="line"><span class="LineNumber"><a href="#CA-24734f5c514ed1c694b95aa22818b0c024bc4b82_1">   1</a> </span><span class="LineAnchor" id="CA-24734f5c514ed1c694b95aa22818b0c024bc4b82_1"></span><span class="anchor" id="line-1-6"></span>&lt;<span class="String">'</span><span class="String">'</span><span class="ID">Procedure</span><span class="String">'</span><span class="String">'</span>&gt;(&lt;<span class="String">'</span><span class="String">'</span><span class="ID">Input</span><span class="String">'</span><span class="String">'</span>&gt;, &lt;<span class="String">'</span><span class="String">'</span><span class="ID">Input</span><span class="String">'</span><span class="String">'</span>&gt;, …)</span>
</pre></div></div><span class="anchor" id="line-106"></span><p class="line874">The
 number of inputs must match the number of parameters.  The value of 
each input is assigned to the value of each parameter name in order, and
 then the block is evaluated. <span class="anchor" id="line-107"></span><span class="anchor" id="line-108"></span></p><p class="line867">
</p><h2 id="If_Statements">If Statements</h2>
<span class="anchor" id="line-109"></span><p class="line862">The <strong>if</strong> statement provides a way to control what code executes based on the result of a test expression. <span class="anchor" id="line-110"></span><span class="anchor" id="line-111"></span></p><p class="line867"><span class="anchor" id="line-112"></span><span class="anchor" id="line-113"></span><span class="anchor" id="line-114"></span><span class="anchor" id="line-1-7"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-57d6b650bfb6b00c171b73779e7bf1703d643fb7\', 1, 1);" \
                class="codenumbers">Toggle line numbers<\/a>');
</script><a href="#" onclick="return togglenumber('CA-57d6b650bfb6b00c171b73779e7bf1703d643fb7', 1, 1);" class="codenumbers">Toggle line numbers</a>
<pre dir="ltr" id="CA-57d6b650bfb6b00c171b73779e7bf1703d643fb7" lang="en"><span class="line"><span class="LineNumber"><a href="#CA-57d6b650bfb6b00c171b73779e7bf1703d643fb7_1">   1</a> </span><span class="LineAnchor" id="CA-57d6b650bfb6b00c171b73779e7bf1703d643fb7_1"></span><span class="anchor" id="line-1-8"></span><span class="ResWord">if</span> &lt;<span class="ID">TestExpression</span>&gt;:</span>
<span class="line"><span class="LineNumber"><a href="#CA-57d6b650bfb6b00c171b73779e7bf1703d643fb7_2">   2</a> </span><span class="LineAnchor" id="CA-57d6b650bfb6b00c171b73779e7bf1703d643fb7_2"></span><span class="anchor" id="line-2-2"></span>   &lt;<span class="ID">Block</span>&gt;</span>
</pre></div></div><span class="anchor" id="line-115"></span><p class="line862">The code in <strong>&lt;<em>Block</em>&gt;</strong> only executes if the <strong>&lt;<em><a class="nonexistent" href="http://wiki.udacity.com/TestExpression">TestExpression</a></em>&gt;</strong> has a <strong>True</strong> value. <span class="anchor" id="line-116"></span><span class="anchor" id="line-117"></span></p><p class="line867"><strong>Alternate clauses</strong>.  We can use an <strong>else</strong> clause in an <strong>if</strong> statement to provide code that will run when the &lt;<a class="nonexistent" href="http://wiki.udacity.com/TestExpression">TestExpression</a>&gt; has a False value. <span class="anchor" id="line-118"></span><span class="anchor" id="line-119"></span></p><p class="line867"><span class="anchor" id="line-120"></span><span class="anchor" id="line-121"></span><span class="anchor" id="line-122"></span><span class="anchor" id="line-123"></span><span class="anchor" id="line-124"></span><span class="anchor" id="line-1-9"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-a3923727160c4e7b5d8abdb447f87e2685c5e391\', 1, 1);" \
                class="codenumbers">Toggle line numbers<\/a>');
</script><a href="#" onclick="return togglenumber('CA-a3923727160c4e7b5d8abdb447f87e2685c5e391', 1, 1);" class="codenumbers">Toggle line numbers</a>
<pre dir="ltr" id="CA-a3923727160c4e7b5d8abdb447f87e2685c5e391" lang="en"><span class="line"><span class="LineNumber"><a href="#CA-a3923727160c4e7b5d8abdb447f87e2685c5e391_1">   1</a> </span><span class="LineAnchor" id="CA-a3923727160c4e7b5d8abdb447f87e2685c5e391_1"></span><span class="anchor" id="line-1-10"></span><span class="ResWord">if</span> &lt;<span class="ID">TestExpression</span>&gt;:</span>
<span class="line"><span class="LineNumber"><a href="#CA-a3923727160c4e7b5d8abdb447f87e2685c5e391_2">   2</a> </span><span class="LineAnchor" id="CA-a3923727160c4e7b5d8abdb447f87e2685c5e391_2"></span><span class="anchor" id="line-2-3"></span>   &lt;<span class="ID">BlockTrue</span>&gt;</span>
<span class="line"><span class="LineNumber"><a href="#CA-a3923727160c4e7b5d8abdb447f87e2685c5e391_3">   3</a> </span><span class="LineAnchor" id="CA-a3923727160c4e7b5d8abdb447f87e2685c5e391_3"></span><span class="anchor" id="line-3-1"></span><span class="ResWord">else</span>:</span>
<span class="line"><span class="LineNumber"><a href="#CA-a3923727160c4e7b5d8abdb447f87e2685c5e391_4">   4</a> </span><span class="LineAnchor" id="CA-a3923727160c4e7b5d8abdb447f87e2685c5e391_4"></span><span class="anchor" id="line-4-1"></span>        &lt;<span class="ID">BlockFalse</span>&gt;</span>
</pre></div></div><span class="anchor" id="line-125"></span><p class="line867">
</p><h2 id="Logical_Operators">Logical Operators</h2>
<span class="anchor" id="line-126"></span><p class="line862">The <strong>and and </strong>or<strong>
 operators behave similarly to logical conjunction (and) and disjunction
 (or).  The important property they have which is different from other 
operators is that the second operand expression is evaluated only when 
necessary. <br>
 </strong> <span class="anchor" id="line-127"></span><span class="anchor" id="line-128"></span></p><ul><li style="list-style-type:none"><p class="line891">&lt;<em>Expression<sub>1</sub></em>&gt; and &lt;<em>Expression<sub>2</sub></em>&gt;<strong> </strong> <span class="anchor" id="line-129"></span></p></li><li style="list-style-type:none"><p class="line891"><strong>If <em></em></strong><em>Expression<sub>1</sub> has a <strong>False</strong> value, the result is <strong>False</strong> and </em><strong>Expression<sub>2</sub><em></em></strong><em> is not evaluated (so even if it would produce an error it does not matter).  If </em><strong>Expression<sub>1</sub><em></em></strong><em> has a <strong>True</strong> value, the result of the <strong>and</strong> is the value of </em><strong>Expression<sub>2</sub></strong><em>.   </em> <span class="anchor" id="line-130"></span><span class="anchor" id="line-131"></span></p></li><li class="gap" style="list-style-type:none"><p class="line891"><em><strong>&lt;</strong><strong></strong></em><strong>Expression<sub>1</sub><em>&gt;</em></strong><em><strong>' or </strong>&lt;<strong></strong></em>Expression<sub>2</sub><em>&gt;<strong></strong>' </em> <span class="anchor" id="line-132"></span></p></li><li style="list-style-type:none"><p class="line891"><em>If </em><strong>Expression<sub>1</sub><em></em></strong><em> has a <strong>True</strong> value, the result is <strong>True</strong> and </em><strong>Expression<sub>2</sub><em></em></strong><em> is not evaluated (so even if it would produce an error it does not matter).  If </em><strong>Expression<sub>1</sub><em></em></strong><em> has a <strong>False</strong> value, the result of the <strong>or</strong> is the value of </em><strong>Expression<sub>2</sub></strong>'. <span class="anchor" id="line-133"></span><span class="anchor" id="line-134"></span></p></li></ul><p class="line867">
</p><h2 id="Loops">Loops</h2>
<span class="anchor" id="line-135"></span><p class="line874">Loops provide a way to evaluate the same block of code an arbitrary number of times. <span class="anchor" id="line-136"></span><span class="anchor" id="line-137"></span></p><p class="line867">
</p><h3 id="While_Loops">While Loops</h3>
<span class="anchor" id="line-138"></span><p class="line862">A <strong>while</strong> loop provides a way to keep executing a block of code as long as a test expression is <strong>True</strong>. <span class="anchor" id="line-139"></span><span class="anchor" id="line-140"></span></p><p class="line867"><span class="anchor" id="line-141"></span><span class="anchor" id="line-142"></span><span class="anchor" id="line-143"></span><span class="anchor" id="line-1-11"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-190d8fe05888dd9979b05e3f66cc479ffa066d57\', 1, 1);" \
                class="codenumbers">Toggle line numbers<\/a>');
</script><a href="#" onclick="return togglenumber('CA-190d8fe05888dd9979b05e3f66cc479ffa066d57', 1, 1);" class="codenumbers">Toggle line numbers</a>
<pre dir="ltr" id="CA-190d8fe05888dd9979b05e3f66cc479ffa066d57" lang="en"><span class="line"><span class="LineNumber"><a href="#CA-190d8fe05888dd9979b05e3f66cc479ffa066d57_1">   1</a> </span><span class="LineAnchor" id="CA-190d8fe05888dd9979b05e3f66cc479ffa066d57_1"></span><span class="anchor" id="line-1-12"></span>        <span class="ResWord">while</span> &lt;<span class="ID">TestExpression</span>&gt;:</span>
<span class="line"><span class="LineNumber"><a href="#CA-190d8fe05888dd9979b05e3f66cc479ffa066d57_2">   2</a> </span><span class="LineAnchor" id="CA-190d8fe05888dd9979b05e3f66cc479ffa066d57_2"></span><span class="anchor" id="line-2-4"></span>              &lt;<span class="ID">Block</span>&gt;</span>
</pre></div></div><span class="anchor" id="line-144"></span><p class="line862">If the <strong>&lt;<em><a class="nonexistent" href="http://wiki.udacity.com/TestExpression">TestExpression</a></em>&gt;</strong> evaluates to <strong>False</strong>, the <strong>while</strong> loop is done and execution continues with the following statement.  If the <strong>&lt;<em><a class="nonexistent" href="http://wiki.udacity.com/TestExpression">TestExpression</a></em>&gt;</strong> evaluates to <strong>True</strong>, the <strong>&lt;<em>Block</em>&gt;</strong> is executed.  Then, the loop repeats, returning to the <strong>&lt;<em><a class="nonexistent" href="http://wiki.udacity.com/TestExpression">TestExpression</a></em>&gt;</strong> and continuing to evaluate the <strong>&lt;<em>Block</em>&gt;</strong> as long as the <strong>&lt;<em><a class="nonexistent" href="http://wiki.udacity.com/TestExpression">TestExpression</a></em>&gt;</strong> is <strong>True</strong>. <span class="anchor" id="line-145"></span><span class="anchor" id="line-146"></span></p><p class="line867">
</p><h3 id="Break_Statement">Break Statement</h3>
<span class="anchor" id="line-147"></span><p class="line862">A <strong>break</strong> statement in the <strong>&lt;<em>Block</em>&gt;</strong> of a <strong>while</strong> loop, jumps out of the containing while loop, continuing execution at the following statement. <span class="anchor" id="line-148"></span><span class="anchor" id="line-149"></span></p><p class="line867"><span class="anchor" id="line-150"></span><span class="anchor" id="line-151"></span><span class="anchor" id="line-1-13"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-e1e499ecc2b8b221ce81d5df8629a6baaeda855a\', 1, 1);" \
                class="codenumbers">Toggle line numbers<\/a>');
</script><a href="#" onclick="return togglenumber('CA-e1e499ecc2b8b221ce81d5df8629a6baaeda855a', 1, 1);" class="codenumbers">Toggle line numbers</a>
<pre dir="ltr" id="CA-e1e499ecc2b8b221ce81d5df8629a6baaeda855a" lang="en"><span class="line"><span class="LineNumber"><a href="#CA-e1e499ecc2b8b221ce81d5df8629a6baaeda855a_1">   1</a> </span><span class="LineAnchor" id="CA-e1e499ecc2b8b221ce81d5df8629a6baaeda855a_1"></span><span class="anchor" id="line-1-14"></span>        <span class="ResWord">break</span></span>
</pre></div></div><span class="anchor" id="line-152"></span><p class="line867">
</p><h2 id="For_Loops">For Loops</h2>
<span class="anchor" id="line-153"></span><p class="line862">A <strong>for</strong> loop provides a way to execute a block once for each element of a collection: <span class="anchor" id="line-154"></span><span class="anchor" id="line-155"></span></p><p class="line867"><span class="anchor" id="line-156"></span><span class="anchor" id="line-157"></span><span class="anchor" id="line-158"></span><span class="anchor" id="line-1-15"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-5f06375e434664620d94194d5ca96025e62d2cca\', 1, 1);" \
                class="codenumbers">Toggle line numbers<\/a>');
</script><a href="#" onclick="return togglenumber('CA-5f06375e434664620d94194d5ca96025e62d2cca', 1, 1);" class="codenumbers">Toggle line numbers</a>
<pre dir="ltr" id="CA-5f06375e434664620d94194d5ca96025e62d2cca" lang="en"><span class="line"><span class="LineNumber"><a href="#CA-5f06375e434664620d94194d5ca96025e62d2cca_1">   1</a> </span><span class="LineAnchor" id="CA-5f06375e434664620d94194d5ca96025e62d2cca_1"></span><span class="anchor" id="line-1-16"></span><span class="ResWord">for</span> &lt;<span class="ID">Name</span>&gt; <span class="ResWord">in</span> &lt;<span class="ID">Collection</span>&gt;:</span>
<span class="line"><span class="LineNumber"><a href="#CA-5f06375e434664620d94194d5ca96025e62d2cca_2">   2</a> </span><span class="LineAnchor" id="CA-5f06375e434664620d94194d5ca96025e62d2cca_2"></span><span class="anchor" id="line-2-5"></span>    &lt;<span class="ID">Block</span>&gt;</span>
</pre></div></div><span class="anchor" id="line-159"></span><p class="line862">The loop goes through each element of the collection, assigning that element to the <strong>&lt;<em>Name</em>&gt;</strong> and evaluating the <strong>&lt;<em>Block</em>&gt;</strong>.
  The collection could be a String, in which case the elements are the 
characters of a string; a List, in which case the elements are the 
elements of the list; a Dictionary, in which case the elements are the 
keys in the dictionary; or many other types in Python that represent 
collections of objects. <span class="anchor" id="line-160"></span><span class="anchor" id="line-161"></span></p><p class="line867">
</p><h2 id="Strings">Strings</h2>
<span class="anchor" id="line-162"></span><p class="line862">A <strong>string</strong>
 is sequence of characters surrounded by quotes.  The quotes can be 
either single or double quotes, but the quotes at both ends of the 
string must be the same type.  Here are some examples of strings in 
Python: <span class="anchor" id="line-163"></span><span class="anchor" id="line-164"></span></p><ul><li style="list-style-type:none">"silly" <span class="anchor" id="line-165"></span></li><li style="list-style-type:none">'string' <span class="anchor" id="line-166"></span></li><li style="list-style-type:none">"I'm a valid string, even with a single quote in the middle!" <span class="anchor" id="line-167"></span><span class="anchor" id="line-168"></span></li></ul><p class="line867">
</p><h3 id="String_Operations">String Operations</h3>
<span class="anchor" id="line-169"></span><p class="line867"><strong>length</strong>:                           <strong>len(&lt;<em>String</em>&gt;) ⇒ &lt;<em>Number</em>&gt;</strong> <br>
 <span class="anchor" id="line-170"></span><span class="anchor" id="line-171"></span></p><ul><li style="list-style-type:none"><p class="line862">Outputs the number of characters in <strong>&lt;<em>String</em>&gt;</strong> <br>
 <span class="anchor" id="line-172"></span><span class="anchor" id="line-173"></span></p></li></ul><p class="line867"><strong>string concatenation</strong>:     <strong>&lt;<em>String</em>&gt; + &lt;<em>String</em>&gt; ⇒ &lt;<em>String</em>&gt;</strong> <br>
 <span class="anchor" id="line-174"></span><span class="anchor" id="line-175"></span></p><ul><li style="list-style-type:none"><p class="line862">Outputs the concatenation of the two input strings (pasting the string together with no space between them) <br>
 <span class="anchor" id="line-176"></span><span class="anchor" id="line-177"></span></p></li></ul><p class="line867"><strong>string multiplication</strong>:    <strong>&lt;<em>String</em>&gt; * &lt;<em>Number</em>&gt; ⇒ &lt;<em>String</em>&gt;</strong> <span class="anchor" id="line-178"></span><span class="anchor" id="line-179"></span></p><ul><li style="list-style-type:none"><p class="line862">Outputs a string that is &lt;<em>Number</em>&gt; copies of the input &lt;String&gt; pasted together <span class="anchor" id="line-180"></span><span class="anchor" id="line-181"></span></p></li></ul><p class="line867">
</p><h4 id="Indexing_Strings">Indexing Strings</h4>
<span class="anchor" id="line-182"></span><p class="line862">The indexing operator provides a way to extract subsequences of characters from a string. <br>
 <strong>string indexing</strong>:  <strong>&lt;<em>String</em>&gt;[&lt;<em>Number</em>&gt;] ⇒ &lt;<em>String</em>&gt;</strong> <br>
 <span class="anchor" id="line-183"></span><span class="anchor" id="line-184"></span></p><ul><li style="list-style-type:none"><p class="line862">Outputs
 a single-character string containing the character at position 
&lt;Number&gt; of the input &lt;String&gt;.  Positions in the string are
 counted starting from <strong>0</strong>, so <strong>s[1]</strong> would output the second character in <strong>s</strong>.  If the &lt;<em>Number</em>&gt; is negative, positions are counted from the end of the string:  <strong>s[-1]</strong> is the last character in <strong>s</strong>. <span class="anchor" id="line-185"></span><span class="anchor" id="line-186"></span></p></li></ul><p class="line867"><strong>string extraction</strong>:        <strong>&lt;<em>String</em>&gt;[&lt;<em>Start Number</em>&gt;:&lt;<em>Stop Number</em>&gt;] ⇒ &lt;<em>String</em>&gt;</strong> <br>
 <span class="anchor" id="line-187"></span><span class="anchor" id="line-188"></span></p><ul><li style="list-style-type:none">Outputs a string that is the subsequence of the input string starting from position <span class="anchor" id="line-189"></span><span class="anchor" id="line-190"></span></li></ul><p class="line867">&lt;<em>Start Number</em>&gt; and ending just before position &lt;<em>Stop Number</em>&gt;.  If &lt;<em>Start Number</em>&gt; is missing, starts from the beginning of the input string; if &lt;<em>Stop Number</em>&gt; is missing, goes to the end of the input string. <br>
 <span class="anchor" id="line-191"></span><span class="anchor" id="line-192"></span></p><p class="line867"><strong>find</strong> <br>
 The <strong>find</strong> method provides a way to find sub-sequences of characters in strings. <br>
 <span class="anchor" id="line-193"></span><span class="anchor" id="line-194"></span></p><p class="line867"><strong>find</strong>:             <strong>&lt;<em>Search String</em>&gt;.find(&lt;<em>Target String</em>&gt;) ⇒ &lt;<em>Number</em>&gt;</strong> <br>
 <span class="anchor" id="line-195"></span><span class="anchor" id="line-196"></span></p><ul><li style="list-style-type:none"><p class="line862">Outputs a number giving the position in &lt;<em>Search String</em>&gt; where &lt;<em>Target String</em>&gt; first appears.  If there is no occurrence of &lt;<em>Target String</em>&gt; in &lt;<em>Search String</em>&gt;, outputs <strong>-1</strong>. <br>
 <span class="anchor" id="line-197"></span><span class="anchor" id="line-198"></span></p></li></ul><p class="line862">To find later occurrences, we can also pass in a number to find: <br>
 <span class="anchor" id="line-199"></span><span class="anchor" id="line-200"></span></p><p class="line867"><strong>find after</strong>:               <strong>&lt;<em>Search String</em>&gt;.find(&lt;<em>Target String</em>&gt;, &lt;<em>Start Number</em>&gt;) ⇒ &lt;<em>Number</em>&gt;</strong> <br>
 <span class="anchor" id="line-201"></span><span class="anchor" id="line-202"></span></p><ul><li style="list-style-type:none"><p class="line862">Outputs a number giving the position in &lt;<em>Search String</em>&gt; where &lt;<em>Target String</em>&gt; first appears that is at or after the position give by &lt;<em>Start Number</em>&gt;.  If there is no occurrence of &lt;<em>Target String</em>&gt; in &lt;<em>Search String</em>&gt; at or after &lt;<em>Start Number</em>&gt;, outputs <strong>-1</strong>. <br>
 <span class="anchor" id="line-203"></span><span class="anchor" id="line-204"></span></p></li></ul><p class="line867">
</p><h4 id="Converting_between_Numbers_and_Strings">Converting between Numbers and Strings</h4>
<span class="anchor" id="line-205"></span><p class="line867"><strong>str</strong>:                      <strong>str(&lt;<em>Number</em>&gt;) ⇒ &lt;String&gt;</strong> <br>
 <span class="anchor" id="line-206"></span><span class="anchor" id="line-207"></span></p><ul><li style="list-style-type:none"><p class="line862">Outputs a string that represents the input number.  For example, <strong>str(23)</strong> outputs the string <strong>'23</strong>'. <br>
 <span class="anchor" id="line-208"></span><span class="anchor" id="line-209"></span></p></li></ul><p class="line867"><strong>ord</strong>:                      <strong>ord(&lt;<em>One-Character String</em>&gt;) ⇒ &lt;<em>Number</em>&gt;</strong> <br>
 <span class="anchor" id="line-210"></span><span class="anchor" id="line-211"></span></p><ul><li style="list-style-type:none"><p class="line862">Outputs the number corresponding to the input string. <br>
 <span class="anchor" id="line-212"></span><span class="anchor" id="line-213"></span></p></li></ul><p class="line867"><strong>chr</strong>:                      <strong>chr(&lt;<em>Number</em>&gt;) ⇒ &lt;<em>One-Character String</em>&gt;</strong> <br>
 <span class="anchor" id="line-214"></span><span class="anchor" id="line-215"></span></p><ul><li style="list-style-type:none"><p class="line862">Outputs the one-character string corresponding to the number input.  This function is the inverse of <strong>ord: chr(ord(α)) = α</strong> for any one-character string α. <br>
 <span class="anchor" id="line-216"></span><span class="anchor" id="line-217"></span></p></li></ul><p class="line867">
</p><h4 id="Splitting_Strings">Splitting Strings</h4>
<span class="anchor" id="line-218"></span><p class="line867"><strong>split</strong>:                    <strong>&lt;<em>String</em>&gt;.split() ⇒ [&lt;<em>String</em>&gt;, &lt;<em>String</em>&gt;, … ]</strong> <br>
 <span class="anchor" id="line-219"></span><span class="anchor" id="line-220"></span></p><ul><li style="list-style-type:none"><p class="line862">outputs
 a list of strings that are (roughly) the words contained in the input 
string.   The words are determined by whitespace (either spaces, tabs, 
or newlines) in the string.  (We did not cover this in class, but split 
can also be used with an optional input that is a list of the separator 
characters, and a second optional input that controls the maximum number
 of elements in the output list.) <br>
 <span class="anchor" id="line-221"></span><span class="anchor" id="line-222"></span></p></li></ul><p class="line867">
</p><h4 id="Looping_through_Strings">Looping through Strings</h4>
<span class="anchor" id="line-223"></span><p class="line862">A <strong>for</strong> loop provides a way to execute a block once for each character in a string (just like looping through the elements of a list): <span class="anchor" id="line-224"></span><span class="anchor" id="line-225"></span></p><p class="line867"><span class="anchor" id="line-226"></span><span class="anchor" id="line-227"></span><span class="anchor" id="line-228"></span><span class="anchor" id="line-1-17"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-d8aac2ff127331cff537ead17be408a0d0c16b19\', 1, 1);" \
                class="codenumbers">Toggle line numbers<\/a>');
</script><a href="#" onclick="return togglenumber('CA-d8aac2ff127331cff537ead17be408a0d0c16b19', 1, 1);" class="codenumbers">Toggle line numbers</a>
<pre dir="ltr" id="CA-d8aac2ff127331cff537ead17be408a0d0c16b19" lang="en"><span class="line"><span class="LineNumber"><a href="#CA-d8aac2ff127331cff537ead17be408a0d0c16b19_1">   1</a> </span><span class="LineAnchor" id="CA-d8aac2ff127331cff537ead17be408a0d0c16b19_1"></span><span class="anchor" id="line-1-18"></span><span class="ResWord">for</span> &lt;<span class="String">'</span><span class="String">'</span><span class="ID">Name</span><span class="String">'</span><span class="String">'</span>&gt; <span class="ResWord">in</span> &lt;<span class="String">'</span><span class="String">'</span><span class="ID">String</span><span class="String">'</span><span class="String">'</span>&gt;:</span>
<span class="line"><span class="LineNumber"><a href="#CA-d8aac2ff127331cff537ead17be408a0d0c16b19_2">   2</a> </span><span class="LineAnchor" id="CA-d8aac2ff127331cff537ead17be408a0d0c16b19_2"></span><span class="anchor" id="line-2-6"></span>            &lt;<span class="String">'</span><span class="String">'</span><span class="ID">Block</span><span class="String">'</span><span class="String">'</span>&gt;</span>
</pre></div></div><span class="anchor" id="line-229"></span><p class="line862">The loop goes through each character of the string in turn, assigning that element to the &lt;<em>Name</em>&gt; and evaluating the &lt;<em>Block</em>&gt;. <span class="anchor" id="line-230"></span><span class="anchor" id="line-231"></span></p><p class="line867">
</p><h2 id="Lists">Lists</h2>
<span class="anchor" id="line-232"></span><p class="line862">A list is a mutable collection of objects.  The elements in a list can be of any type, including other lists. <br>
 <span class="anchor" id="line-233"></span><span class="anchor" id="line-234"></span></p><p class="line867"><strong>Constructing a list</strong>.  A list is a sequence of zero or more elements, surrounded by square brackets:<br>
 <span class="anchor" id="line-235"></span><span class="anchor" id="line-236"></span></p><ul><li style="list-style-type:none"><p class="line891"><strong>[ &lt;<em>Element</em>&gt;, &lt;<em>Element</em>&gt;, … ]</strong> <span class="anchor" id="line-237"></span><span class="anchor" id="line-238"></span></p></li></ul><p class="line867"><strong>Constructing a list of integers</strong>. The <strong>range</strong>
 function can help us in this task. This is a function to create lists 
containing arithmetic progressions. It is most often used in for loops. 
The arguments must be plain integers. If the step argument is omitted, 
it defaults to 1. If the start argument is omitted, it defaults to 0.  <span class="anchor" id="line-239"></span><span class="anchor" id="line-240"></span></p><ul><li style="list-style-type:none"><p class="line891"><strong>range([start], stop[, step])</strong>.  <span class="anchor" id="line-241"></span><span class="anchor" id="line-242"></span></p></li></ul><p class="line874">Example: <span class="anchor" id="line-243"></span><span class="anchor" id="line-244"></span></p><p class="line867"><span class="anchor" id="line-245"></span><span class="anchor" id="line-246"></span><span class="anchor" id="line-247"></span><span class="anchor" id="line-248"></span><span class="anchor" id="line-249"></span><span class="anchor" id="line-250"></span><span class="anchor" id="line-251"></span><span class="anchor" id="line-252"></span><span class="anchor" id="line-253"></span><span class="anchor" id="line-254"></span><span class="anchor" id="line-255"></span><span class="anchor" id="line-256"></span><span class="anchor" id="line-257"></span><span class="anchor" id="line-258"></span><span class="anchor" id="line-259"></span><span class="anchor" id="line-1-19"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-c2cabb3a91111c35985e31e57da0792cfcccaf33\', 1, 1);" \
                class="codenumbers">Toggle line numbers<\/a>');
</script><a href="#" onclick="return togglenumber('CA-c2cabb3a91111c35985e31e57da0792cfcccaf33', 1, 1);" class="codenumbers">Toggle line numbers</a>
<pre dir="ltr" id="CA-c2cabb3a91111c35985e31e57da0792cfcccaf33" lang="en"><span class="line"><span class="LineNumber"><a href="#CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_1">   1</a> </span><span class="LineAnchor" id="CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_1"></span><span class="anchor" id="line-1-20"></span>&gt;&gt;&gt; <span class="ResWord">range</span>(<span class="Number">10</span>)</span>
<span class="line"><span class="LineNumber"><a href="#CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_2">   2</a> </span><span class="LineAnchor" id="CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_2"></span><span class="anchor" id="line-2-7"></span>[<span class="Number">0</span>, <span class="Number">1</span>, <span class="Number">2</span>, <span class="Number">3</span>, <span class="Number">4</span>, <span class="Number">5</span>, <span class="Number">6</span>, <span class="Number">7</span>, <span class="Number">8</span>, <span class="Number">9</span>]</span>
<span class="line"><span class="LineNumber"><a href="#CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_3">   3</a> </span><span class="LineAnchor" id="CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_3"></span><span class="anchor" id="line-3-2"></span>&gt;&gt;&gt; <span class="ResWord">range</span>(<span class="Number">1</span>, <span class="Number">11</span>)</span>
<span class="line"><span class="LineNumber"><a href="#CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_4">   4</a> </span><span class="LineAnchor" id="CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_4"></span><span class="anchor" id="line-4-2"></span>[<span class="Number">1</span>, <span class="Number">2</span>, <span class="Number">3</span>, <span class="Number">4</span>, <span class="Number">5</span>, <span class="Number">6</span>, <span class="Number">7</span>, <span class="Number">8</span>, <span class="Number">9</span>, <span class="Number">10</span>]</span>
<span class="line"><span class="LineNumber"><a href="#CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_5">   5</a> </span><span class="LineAnchor" id="CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_5"></span><span class="anchor" id="line-5-1"></span>&gt;&gt;&gt; <span class="ResWord">range</span>(<span class="Number">0</span>, <span class="Number">30</span>, <span class="Number">5</span>)</span>
<span class="line"><span class="LineNumber"><a href="#CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_6">   6</a> </span><span class="LineAnchor" id="CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_6"></span><span class="anchor" id="line-6-1"></span>[<span class="Number">0</span>, <span class="Number">5</span>, <span class="Number">10</span>, <span class="Number">15</span>, <span class="Number">20</span>, <span class="Number">25</span>]</span>
<span class="line"><span class="LineNumber"><a href="#CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_7">   7</a> </span><span class="LineAnchor" id="CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_7"></span><span class="anchor" id="line-7-1"></span>&gt;&gt;&gt; <span class="ResWord">range</span>(<span class="Number">0</span>, <span class="Number">10</span>, <span class="Number">3</span>)</span>
<span class="line"><span class="LineNumber"><a href="#CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_8">   8</a> </span><span class="LineAnchor" id="CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_8"></span><span class="anchor" id="line-8-1"></span>[<span class="Number">0</span>, <span class="Number">3</span>, <span class="Number">6</span>, <span class="Number">9</span>]</span>
<span class="line"><span class="LineNumber"><a href="#CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_9">   9</a> </span><span class="LineAnchor" id="CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_9"></span><span class="anchor" id="line-9-1"></span>&gt;&gt;&gt; <span class="ResWord">range</span>(<span class="Number">0</span>, -<span class="Number">10</span>, -<span class="Number">1</span>)</span>
<span class="line"><span class="LineNumber"><a href="#CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_10">  10</a> </span><span class="LineAnchor" id="CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_10"></span><span class="anchor" id="line-10-1"></span>[<span class="Number">0</span>, -<span class="Number">1</span>, -<span class="Number">2</span>, -<span class="Number">3</span>, -<span class="Number">4</span>, -<span class="Number">5</span>, -<span class="Number">6</span>, -<span class="Number">7</span>, -<span class="Number">8</span>, -<span class="Number">9</span>]</span>
<span class="line"><span class="LineNumber"><a href="#CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_11">  11</a> </span><span class="LineAnchor" id="CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_11"></span><span class="anchor" id="line-11-1"></span>&gt;&gt;&gt; <span class="ResWord">range</span>(<span class="Number">0</span>)</span>
<span class="line"><span class="LineNumber"><a href="#CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_12">  12</a> </span><span class="LineAnchor" id="CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_12"></span><span class="anchor" id="line-12-1"></span>[]</span>
<span class="line"><span class="LineNumber"><a href="#CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_13">  13</a> </span><span class="LineAnchor" id="CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_13"></span><span class="anchor" id="line-13-1"></span>&gt;&gt;&gt; <span class="ResWord">range</span>(<span class="Number">1</span>, <span class="Number">0</span>)</span>
<span class="line"><span class="LineNumber"><a href="#CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_14">  14</a> </span><span class="LineAnchor" id="CA-c2cabb3a91111c35985e31e57da0792cfcccaf33_14"></span><span class="anchor" id="line-14-1"></span>[]</span>
</pre></div></div><span class="anchor" id="line-260"></span><span class="anchor" id="line-261"></span><p class="line867"><strong>Selecting elements</strong>:               <strong>&lt;<em>List</em>&gt;[&lt;<em>Number</em>&gt;] ⇒ &lt;<em>Element</em>&gt;</strong> <br>
 <span class="anchor" id="line-262"></span><span class="anchor" id="line-263"></span></p><ul><li style="list-style-type:none"><p class="line862">Outputs the value of the element in &lt;List&gt; at position &lt;Number&gt;.  Elements are indexed starting from 0. <br>
 <span class="anchor" id="line-264"></span><span class="anchor" id="line-265"></span></p></li></ul><p class="line867"><strong>Selecting sub-sequences</strong>:  <strong>&lt;<em>List</em>&gt;[&lt;<em>Start</em>&gt; : &lt;<em>Stop</em>&gt;] ⇒ &lt;<em>List</em>&gt;</strong> <br>
 <span class="anchor" id="line-266"></span><span class="anchor" id="line-267"></span></p><ul><li style="list-style-type:none"><p class="line862">Outputs a sub-sequence of &lt;List&gt; starting from position &lt;Start&gt;, up to (but not including) position &lt;Stop&gt;. <br>
 <span class="anchor" id="line-268"></span><span class="anchor" id="line-269"></span></p></li></ul><p class="line867"><strong>Update</strong>:                   <strong>&lt;<em>List</em>&gt;[&lt;<em>Number</em>&gt;] = &lt;<em>Value</em>&gt;</strong> <br>
 <span class="anchor" id="line-270"></span><span class="anchor" id="line-271"></span></p><ul><li style="list-style-type:none"><p class="line862">Modifies the value of the element in &lt;<em>List</em>&gt; at position &lt;<em>Number</em>&gt; to be &lt;<em>Value</em>&gt;. <br>
 <span class="anchor" id="line-272"></span><span class="anchor" id="line-273"></span></p></li></ul><p class="line867"><strong>Length</strong>:                           <strong>len(&lt;<em>List</em>&gt;) ⇒ &lt;<em>Number</em>&gt;</strong> <br>
 <span class="anchor" id="line-274"></span><span class="anchor" id="line-275"></span></p><ul><li style="list-style-type:none"><p class="line862">Outputs the number of (top-level) elements in &lt;List&gt;. <br>
 <span class="anchor" id="line-276"></span><span class="anchor" id="line-277"></span></p></li></ul><p class="line867"><strong>Append</strong>:                           <strong>&lt;<em>List</em>&gt;.append(&lt;<em>Element</em>&gt;)</strong> <br>
 <span class="anchor" id="line-278"></span><span class="anchor" id="line-279"></span></p><ul><li style="list-style-type:none"><p class="line862">Mutates &lt;<em>List</em>&gt; by adding &lt;<em>Element</em>&gt; to the end of the list. <br>
 <span class="anchor" id="line-280"></span><span class="anchor" id="line-281"></span></p></li></ul><p class="line867"><strong>Concatenation</strong>:                    <strong>&lt;<em>List<sub>1</sub></em>&gt; + &lt;<em>List<sub>2</sub></em>&gt; ⇒ &lt;<em>Element</em>&gt;</strong> <br>
 <span class="anchor" id="line-282"></span><span class="anchor" id="line-283"></span></p><ul><li style="list-style-type:none"><p class="line862">Outputs a new list that is the elements of &lt;<em>List<sub>1</sub></em>&gt; followed by the elements of &lt;<em>List<sub>2</sub></em>&gt;. <br>
 <span class="anchor" id="line-284"></span><span class="anchor" id="line-285"></span></p></li></ul><p class="line867"><strong>Popping</strong>:                  <strong>&lt;<em>List</em>&gt;.pop() ⇒ &lt;<em>Element</em>&gt;</strong> <br>
 <span class="anchor" id="line-286"></span><span class="anchor" id="line-287"></span></p><ul><li style="list-style-type:none"><p class="line862">Mutates &lt;<em>List</em>&gt; by removing its last element.  Outputs the value of that element.  If there are no elements in &lt;<em>List</em>&gt;, [].pop() produces an error. <br>
 <span class="anchor" id="line-288"></span><span class="anchor" id="line-289"></span></p></li></ul><p class="line867"><strong>Finding</strong>:                  <strong>&lt;<em>List</em>&gt;.index(&lt;<em>Value</em>&gt;) ⇒ &lt;<em>Number</em>&gt;</strong> <br>
 <span class="anchor" id="line-290"></span><span class="anchor" id="line-291"></span></p><ul><li style="list-style-type:none"><p class="line862">Outputs the position of the first occurrence of an element matching &lt;<em>Value</em>&gt; in &lt;<em>List</em>&gt;.  If &lt;<em>Value</em>&gt; is not found in &lt;<em>List</em>&gt;, produces an error. <br>
 <span class="anchor" id="line-292"></span><span class="anchor" id="line-293"></span></p></li></ul><p class="line867"><strong>Membership</strong>:                       <strong>&lt;<em>Value</em>&gt; in &lt;<em>List</em>&gt; ⇒ &lt;<em>Boolean</em>&gt;</strong> <br>
 <span class="anchor" id="line-294"></span><span class="anchor" id="line-295"></span></p><ul><li style="list-style-type:none"><p class="line862">Outputs <strong>True</strong> if &lt;<em>Value</em>&gt; occurs in &lt;<em>List</em>&gt;.  Otherwise, outputs <strong>False</strong>. <br>
 <span class="anchor" id="line-296"></span><span class="anchor" id="line-297"></span></p></li></ul><p class="line867"><strong>Non-membership</strong>:           <strong>&lt;<em>Value</em>&gt; not in &lt;<em>List</em>&gt; ⇒ &lt;<em>Boolean</em>&gt;</strong> <br>
 <span class="anchor" id="line-298"></span><span class="anchor" id="line-299"></span></p><ul><li style="list-style-type:none"><p class="line862">Outputs <strong>False</strong> if &lt;<em>Value</em>&gt; occurs in &lt;<em>List</em>&gt;.  Otherwise, outputs <strong>True</strong>. <br>
 <span class="anchor" id="line-300"></span><span class="anchor" id="line-301"></span></p></li></ul><p class="line867">
</p><h3 id="Loops_on_Lists">Loops on Lists</h3>
<span class="anchor" id="line-302"></span><p class="line862">A <strong>for</strong> loop provides a way to execute a block once for each element of a List: <span class="anchor" id="line-303"></span><span class="anchor" id="line-304"></span></p><p class="line867"><span class="anchor" id="line-305"></span><span class="anchor" id="line-306"></span><span class="anchor" id="line-307"></span></p><pre><span class="anchor" id="line-1"></span>for &lt;''Name''&gt; in &lt;''List''&gt;:
<span class="anchor" id="line-2"></span>    &lt;''Block''&gt;</pre><span class="anchor" id="line-308"></span><p class="line867">
</p><h2 id="Dictionaries">Dictionaries</h2>
<span class="anchor" id="line-309"></span><p class="line862">A 
Dictionary provides a mapping between keys, which can be values of any 
immutable type, and values, which can be any value.  Because a 
Dictionary is implemented using a hash table, the time to lookup a value
 does not increase (significantly) even when the number of keys 
increases. <br>
 <span class="anchor" id="line-310"></span><span class="anchor" id="line-311"></span></p><p class="line867"><strong>Constructing a Dictionary</strong>.  A Dictionary is a set of zero or more key-value pairs, surrounded by squiggly braces: <br>
 <span class="anchor" id="line-312"></span><span class="anchor" id="line-313"></span></p><ul><li style="list-style-type:none"><p class="line891"><strong>{ &lt;Key&gt;: &lt;Value&gt;, &lt;Key&gt;: &lt;Value&gt;, … }</strong> <br>
 <span class="anchor" id="line-314"></span><span class="anchor" id="line-315"></span></p></li></ul><p class="line867"><strong>Looking up elements</strong>:              <strong>&lt;<em>Dictionary</em>&gt;[&lt;<em>Key</em>&gt;] ⇒ &lt;<em>Value</em>&gt;</strong> <br>
 <span class="anchor" id="line-316"></span><span class="anchor" id="line-317"></span></p><ul><li style="list-style-type:none"><p class="line862">outputs the value associated with &lt;<em>Key</em>&gt; in the &lt;<em>Dictionary</em>&gt;.  Produces an error if the &lt;<em>Key</em>&gt; is not a key in the &lt;<em>Dictionary</em>&gt;. <br>
 <span class="anchor" id="line-318"></span><span class="anchor" id="line-319"></span></p></li></ul><p class="line867"><strong>Updating elements</strong>:                <strong>&lt;<em>Dictionary</em>&gt;[&lt;<em>Key</em>&gt;] = &lt;<em>Value</em>&gt;</strong> <br>
 <span class="anchor" id="line-320"></span><span class="anchor" id="line-321"></span></p><ul><li style="list-style-type:none"><p class="line862">updates the value associated with &lt;<em>Key</em>&gt; in the &lt;<em>Dictionary</em>&gt; to be &lt;<em>Value</em>&gt;.  If &lt;<em>Key</em>&gt; is already a key in &lt;<em>Dictionary</em>&gt;, replaces the value associated with &lt;<em>Key</em>&gt;; if not, adds a new &lt;<em>Key</em>&gt;: &lt;<em>Value</em>&gt; pair to the &lt;<em>Dictionary</em>&gt;. <br>
 <span class="anchor" id="line-322"></span><span class="anchor" id="line-323"></span></p></li></ul><p class="line867"><strong>Membership</strong>:                       <strong>&lt;<em>Key</em>&gt; in &lt;<em>Dictionary</em>&gt; ⇒ &lt;<em>Boolean</em>&gt;</strong> <br>
 <span class="anchor" id="line-324"></span><span class="anchor" id="line-325"></span></p><ul><li style="list-style-type:none"><p class="line862">outputs True if &lt;<em>Key</em>&gt; is a key in &lt;<em>Dictionary</em>&gt;, <strong>False</strong> otherwise. <br>
 <span class="anchor" id="line-326"></span><span class="anchor" id="line-327"></span></p></li></ul><p class="line867">
</p><h3 id="Loops_on_Dictionaries">Loops on Dictionaries</h3>
<span class="anchor" id="line-328"></span><p class="line862">A <strong>for</strong> loop provides a way to execute a block once for each key in a Dictionary: <span class="anchor" id="line-329"></span><span class="anchor" id="line-330"></span></p><p class="line867"><span class="anchor" id="line-331"></span><span class="anchor" id="line-332"></span><span class="anchor" id="line-333"></span><span class="anchor" id="line-1-21"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-a9cf6e61b6768babca89a280e6c5e93d7c38704a\', 1, 1);" \
                class="codenumbers">Toggle line numbers<\/a>');
</script><a href="#" onclick="return togglenumber('CA-a9cf6e61b6768babca89a280e6c5e93d7c38704a', 1, 1);" class="codenumbers">Toggle line numbers</a>
<pre dir="ltr" id="CA-a9cf6e61b6768babca89a280e6c5e93d7c38704a" lang="en"><span class="line"><span class="LineNumber"><a href="#CA-a9cf6e61b6768babca89a280e6c5e93d7c38704a_1">   1</a> </span><span class="LineAnchor" id="CA-a9cf6e61b6768babca89a280e6c5e93d7c38704a_1"></span><span class="anchor" id="line-1-22"></span><span class="ResWord">for</span> &lt;<span class="ID">Name</span>&gt; <span class="ResWord">in</span> &lt;<span class="ID">Dictionary</span>&gt;:</span>
<span class="line"><span class="LineNumber"><a href="#CA-a9cf6e61b6768babca89a280e6c5e93d7c38704a_2">   2</a> </span><span class="LineAnchor" id="CA-a9cf6e61b6768babca89a280e6c5e93d7c38704a_2"></span><span class="anchor" id="line-2-8"></span>    &lt;<span class="ID">Block</span>&gt;</span>
</pre></div></div><span class="anchor" id="line-334"></span><p class="line867"><strong>Eval</strong> <br>
 The <strong>eval</strong> function provides a way to evaluate an input string as a Python expression: <span class="anchor" id="line-335"></span><span class="anchor" id="line-336"></span></p><ul><li style="list-style-type:none"><p class="line891"><strong>eval(&lt;String&gt;) ⇒ &lt;Value&gt;</strong> <span class="anchor" id="line-337"></span><span class="anchor" id="line-338"></span></p></li></ul><p class="line862">The input is a string that is a Python expression; the value is the value that string would evaluate to in Python. <br>
 <span class="anchor" id="line-339"></span><span class="anchor" id="line-340"></span></p><p class="line867"><strong>Time</strong> The time library provides functions for obtaining and measuring time. <span class="anchor" id="line-341"></span><span class="anchor" id="line-342"></span></p><ul><li style="list-style-type:none"><p class="line891"><strong>import time</strong> <span class="anchor" id="line-343"></span><span class="anchor" id="line-344"></span></p></li></ul><p class="line867"><strong>System time</strong>:              <strong>time.clock()⇒ &lt;<em>Number</em>&gt;</strong> <br>
 <span class="anchor" id="line-345"></span><span class="anchor" id="line-346"></span></p><ul><li style="list-style-type:none">outputs
 the processor time in seconds (a real number, including fractional 
seconds with limited accuracy)  (Note that what clock means depends on 
your platform, and it may not provide accurate timings on all 
platforms.) <span class="anchor" id="line-347"></span><span class="anchor" id="line-348"></span></li></ul><p class="line867">
</p><h2 id="Exceptions">Exceptions</h2>
<span class="anchor" id="line-349"></span><p class="line862">(We introduced exceptions in Unit 4 because we needed them in our <strong>get_page</strong>
 procedure, but you are not expected to understand this in detail or be 
able to use exception handlers in your own code in cs101.) <span class="anchor" id="line-350"></span><span class="anchor" id="line-351"></span></p><p class="line867"><span class="anchor" id="line-352"></span><span class="anchor" id="line-353"></span><span class="anchor" id="line-354"></span><span class="anchor" id="line-355"></span><span class="anchor" id="line-356"></span><span class="anchor" id="line-1-23"></span></p><div class="highlight python"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-9397a50fe82b7e3e3ff41b955a55e1c33980d606\', 1, 1);" \
                class="codenumbers">Toggle line numbers<\/a>');
</script><a href="#" onclick="return togglenumber('CA-9397a50fe82b7e3e3ff41b955a55e1c33980d606', 1, 1);" class="codenumbers">Toggle line numbers</a>
<pre dir="ltr" id="CA-9397a50fe82b7e3e3ff41b955a55e1c33980d606" lang="en"><span class="line"><span class="LineNumber"><a href="#CA-9397a50fe82b7e3e3ff41b955a55e1c33980d606_1">   1</a> </span><span class="LineAnchor" id="CA-9397a50fe82b7e3e3ff41b955a55e1c33980d606_1"></span><span class="anchor" id="line-1-24"></span><span class="ResWord">try</span>:</span>
<span class="line"><span class="LineNumber"><a href="#CA-9397a50fe82b7e3e3ff41b955a55e1c33980d606_2">   2</a> </span><span class="LineAnchor" id="CA-9397a50fe82b7e3e3ff41b955a55e1c33980d606_2"></span><span class="anchor" id="line-2-9"></span>        &lt;<span class="String">'</span><span class="String">'</span><span class="ID">Try</span> <span class="ID">Block</span><span class="String">'</span><span class="String">'</span>&gt;</span>
<span class="line"><span class="LineNumber"><a href="#CA-9397a50fe82b7e3e3ff41b955a55e1c33980d606_3">   3</a> </span><span class="LineAnchor" id="CA-9397a50fe82b7e3e3ff41b955a55e1c33980d606_3"></span><span class="anchor" id="line-3-3"></span><span class="ResWord">except</span>:</span>
<span class="line"><span class="LineNumber"><a href="#CA-9397a50fe82b7e3e3ff41b955a55e1c33980d606_4">   4</a> </span><span class="LineAnchor" id="CA-9397a50fe82b7e3e3ff41b955a55e1c33980d606_4"></span><span class="anchor" id="line-4-3"></span>        &lt;<span class="String">'</span><span class="String">'</span><span class="ID">Handler</span> <span class="ID">Block</span><span class="String">'</span><span class="String">'</span>&gt;</span>
</pre></div></div><span class="anchor" id="line-357"></span><p class="line862">Execute the code in the &lt;<em>Try Block</em>&gt;.  If it completes normally, skip the &lt;Handler Block&gt; and continue with the following statement.  If code in the &lt;<em>Try Block</em>&gt; raises an error, jump to the code in the &lt;<em>Handler Block</em>&gt;. <br>
 <span class="anchor" id="line-358"></span><span class="anchor" id="line-359"></span></p><p class="line862">The <strong>except</strong> can be followed by an exception type and a variable name: <br>
 <span class="anchor" id="line-360"></span><span class="anchor" id="line-361"></span></p><ul><li style="list-style-type:none"><p class="line891"><strong>except</strong> &lt;<em>Exception Type</em>&gt;, &lt;<em>Name</em>&gt;: <span class="anchor" id="line-362"></span></p><ul><li style="list-style-type:none"><p class="line891">&lt;<em>Handler Block</em>&gt; <br>
 <span class="anchor" id="line-363"></span><span class="anchor" id="line-364"></span></p></li></ul></li></ul><p class="line862">If the exception raised in the &lt;<em>Try Block</em>&gt; matches the type &lt;<em>Exception Type</em>&gt;, evaluate the &lt;<em>Handler Block</em>&gt; with the variable &lt;<em>Name</em>&gt; referring to the exception object. <br>
 <span class="anchor" id="line-365"></span><span class="anchor" id="line-366"></span></p><p class="line867">
</p><h2 id="Libraries">Libraries</h2>
<span class="anchor" id="line-367"></span><ul><li style="list-style-type:none"><p class="line891"><strong>import</strong> &lt;<em>Library</em>&gt; <span class="anchor" id="line-368"></span><span class="anchor" id="line-369"></span></p></li></ul><p class="line862">Imports the &lt;<em>Library</em>&gt; into the Python environment, enabling the following code to use the definitions provided in the &lt;<em>Library</em>&gt;.  Python provides many libraries such as <strong>urllib</strong> that we use for downloading web pages in <strong>get_page</strong>, and you can also import your own code.  As programs get larger, it is important to organize them well into separate files. <span class="anchor" id="line-370"></span><span class="anchor" id="bottom"></span></p></div><div id="pagebottom"></div>
</div>
</div><div class="footer"><span class="time" dir="ltr" lang="en">last edited 2012-06-01 11:02:52 by <span title="Danislav Kostov @ 50.116.54.191[50.116.54.191]"><a class="nonexistent" href="http://wiki.udacity.com/Danislav%20Kostov" title="Danislav Kostov @ 50.116.54.191[50.116.54.191]">Danislav Kostov</a></span></span>
</div>
<script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-29218959-1']);
    _gaq.push(['_trackPageview']);

    (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>



</body></html>